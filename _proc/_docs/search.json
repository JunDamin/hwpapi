[
  {
    "objectID": "01_tutorials/tutorial.html",
    "href": "01_tutorials/tutorial.html",
    "title": "tutorial",
    "section": "",
    "text": "기본적으로 한글에서 사용자의 입력을 따라합니다.\n그것을 반복합니다.\n\nfrom hwpapi.core import App\n\nApp은 기존 hwpapi를 wrapping 하여 보다 사용하기 쉽게 만드는 것을 목적으로 하고 있는 클래스 입니다.\nhwpapi는 한글 컨트롤을 조합해서 자주사용했던 기능을 구현하였습니다. 또한, api 메소드를 통해 win32com의 방식으로 모두 사용할 수 있어 다양하게 사용할 수 있습니다.\n아래와 같이 App 객체를 생성하면 한글이 열립니다.\n\napp = App()\n\n한글을 조작할 때는 크게 action과 hwpctrl method로 나눌 수 있습니다. action은 파라미터를 설정하고 그것을 실행시켜서 작동하는 방식으로 사용자 단축키를 누르면 실행되는 명령에 가깝다면 hwpctrl method는 한글 자동화 모듈이 제공하는 것으로 사용자 입력에서는 신경쓰지 않아도 될 부분들을 처리하는 것이라고 보시면 됩니다.\n공식 개발 매뉴얼에 여러 action과 parameter, method의 설명을 제공하고 있습니다. 아쉽게도 문서가 잘 관리되고 있지는 않으며, hwpctrl의 method들을 보면 명시되어 있지 않은 기능들이 개발되어 있음을 알 수 있습니다.\n앞으로 개발해 나가면서 확인된 액션과 메소드 들을 정리해 나가고자 합니다.\naction은 app에서 생성할 수 있습니다. 방식은 크게 2가지로 직접 action key를 입력하는 방법과 actions에 있는 action 객체를 생성하는 방법이 있습니다. 아래 두 방식은 동일한 Action 객체를 생성합니다.\n\naction1 = app.create_action(\"InsertText\")\naction1\n\n&lt;Action InsertText: 텍스트 삽입&gt;\n\n\n\naction2 = app.actions.InsertText()\naction2\n\n&lt;Action InsertText: 텍스트 삽입&gt;\n\n\nDelete(지우기), BreakPara(줄바꿈) 등 많은 action은 파라미터 세팅이 필요 없습니다. 하지만 위에서 생성한 InsertText객체는 입력할 텍스트 값을 넣어주어야 합니다. 이는 parameter를 통해 설정할 수 있습니다.\n\naction1.pset.Text = \"입력하기\"\n\n파라미터를 설정한 후 다음과 같이 액션을 실행하면 텍스트가 입력되는 걸 볼 수 있습니다.\n\naction1.run()\n\nTrue\n\n\n\ncharshape = app.actions.CharShape()\n\n\ncharshape.pset.Height = app.api.PointToHwpUnit(20)\n\n\ncharshape.run()\n\nTrue\n\n\n\naction2.pset.Text = \"크게 입력하기\"\naction2.run()\n\nTrue"
  },
  {
    "objectID": "02_api/core.html",
    "href": "02_api/core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nApp\n\n App (api=None)\n\nApp 클래스는 한컴오피스의 한/글 프로그램과 상호작용하기 위한 인터페이스를 제공합니다.\n\nsource\n\n\nApp.set_visible\n\n App.set_visible (app:__main__.App, is_visible=True, window_i=0)\n\nset_visible() 함수는 한/글 프로그램의 창을 화면에 보이거나 숨기기 위해 호출됩니다. is_visible 인자가 True일 경우 창이 화면에 보이고, False일 경우 숨깁니다. window_i 인자는 창의 인덱스를 지정합니다.\n\nsource\n\n\nApp.get_filepath\n\n App.get_filepath (app:__main__.App)\n\nget_filepath() 함수는 현재 열려있는 한/글 문서의 경로를 반환합니다.\n\nimport pywintypes\n\ntry:\n    app = App(app.api)\nexcept NameError:\n    app = App()\nexcept pywintypes.com_error:\n    app = App()\n\n\nsource\n\n\nApp.open\n\n App.open (app:__main__.App, path:str)\n\nopen() 함수는 파일 경로를 인자로 받아 해당 파일을 한/글 프로그램에서 엽니다. get_absolute_path() 함수를 호출하여 절대 경로로 변환한 후, api.Open() 함수를 호출하여 파일을 엽니다. 열린 파일의 경로를 반환합니다.\n\napp.open(\"test/공문양식.hwp\")\n\n'C:/Users/freed/Documents/python_projects/HwpApi/nbs/02_api/test/공문양식.hwp'\n\n\n\nsource\n\n\nApp.save\n\n App.save (app:__main__.App, path=None)\n\nsave() 함수는 현재 열려있는 문서를 저장하거나 다른 이름으로 저장합니다. path 인자가 주어지지 않은 경우 현재 문서를 덮어쓰기로 저장하고, 저장된 파일의 경로를 반환합니다. path 인자가 주어진 경우, Path 모듈을 이용하여 파일 확장자를 추출한 후, 해당 확장자에 맞게 문서를 저장합니다. 저장된 파일의 경로를 반환합니다.\n\nsource\n\n\nApp.close\n\n App.close (app:__main__.App)\n\nclose() 함수는 현재 열려있는 문서를 닫습니다.\n\nsource\n\n\nApp.quit\n\n App.quit (app:__main__.App)\n\nquit() 함수는 한/글 프로그램을 종료합니다.\n\nsource\n\n\nApp.create_action\n\n App.create_action (app:__main__.App, action_key:str)\n\ncreate_action() 함수는 _Action 클래스의 객체를 생성하여 반환합니다.\n\nsource\n\n\nApp.create_parameterset\n\n App.create_parameterset (app:__main__.App, action_key:str)\n\ncreate_parameterset() 함수는 특정 액션의 파라미터셋을 반환합니다. _action_info 딕셔너리에서 액션에 대한 정보를 찾아서 파라미터셋의 키 값을 가져옵니다. 파라미터셋 객체를 반환합니다.\n\nsource\n\n\nApp.set_charshape\n\n App.set_charshape (app:__main__.App, fontname:str=None, font_type:int=1,\n                    size:int=None, ratio:int=None, spacing:int=None,\n                    offset:int=None, bold:bool=None, italic:bool=None,\n                    small_caps:bool=None, emboss:bool=None,\n                    super_script:bool=None, sub_script:bool=None,\n                    underline_type:int=None, outline_type:int=None,\n                    text_color=None, shade_color=None,\n                    underline_shape:int=None, underline_color=None,\n                    shadow_offset_x:int=None, shadow_offset_y:int=None,\n                    shadow_color=None, strike_out_type=None,\n                    diac_sym_mark=None, use_font_space=None,\n                    use_kerning=None, height:int=None)\n\n`현재 위치의 글자 모양을 조정합니다.\n\nsource\n\n\nApp.insert_text\n\n App.insert_text (app:__main__.App, text:str, fontname=None, font_type=1,\n                  bold=None, italic=None, strike_out_type=None,\n                  underline_type=None, ratio=None, height=None,\n                  text_color=None)\n\n`text를 입력합니다.\n\napp.insert_text(\"안녕하세요\", fontname=\"돋움체\", ratio=90, height=11, text_color=\"1FBCAA\")\n\n\n\n\nscan\n\n scan (app:__main__.App, option='All', selection=False,\n       scan_spos='Document', scan_epos='Document', spara=None, spos=None,\n       epara=None, epos=None, scan_direction='Forward')\n\n\nsource\n\n\nApp.move\n\n App.move (app:__main__.App, move_key='ScanPos', para=None, pos=None)\n\n키워드를 바탕으로 캐럿 위치를 이동시킵니다.\n\nget_value(move_ids, \"ScanPos\")\n\n201\n\n\n\nwith app.scan() as scan:\n    for text in scan:\n        print(text)\n        if \"청년인턴\" in text:\n            app.move()\n\n\n\nOOOO 주 식 회 사\n\n\n\n  주소 OO시 OO구 OO동 O-O    /전화 OOOO-OOOO-OOOO     /전송 OOOO-OOOO-OOOO\n\n\n\n\n\n\n\n\n\n  문서번호\n\n\n\n  시행일자\n\n   (경유)\n\n\n\n  수 신\n\n\n\n  참 조\n\n취    급\n\n\n\n\n\n보    존\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n기 안 자\n\n\n\n\n\n협조\n\n\n\n\n\n\n\n  제 목 : OOOO안녕하세요\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n발  신  부  서  장\n\n\n\n\n\n@patch\ndef setup_page(\n    app:App,   # app\n    top=20,     # 윗 여백\n    bottom=10,     # 아래 여백\n    right=20,     # 오른쪽 여백\n    left=20,     # 왼쪽 여백\n    header=15,     # 머릿말\n    footer=5,     # 꼬릿말\n    gutter=0):    # 제본\n    \"\"\"\n    페이지를 설정합니다.\n    \"\"\"\n    action = app.actions.PageSetup()\n    p = action.pset\n\n    p.PageDef.TopMargin = app.api.MiliToHwpUnit(top)\n    p.PageDef.HeaderLen = app.api.MiliToHwpUnit(header)\n    p.PageDef.RightMargin = app.api.MiliToHwpUnit(right)\n    p.PageDef.BottomMargin = app.api.MiliToHwpUnit(bottom)\n    p.PageDef.FooterLen = app.api.MiliToHwpUnit(footer)\n    p.PageDef.LeftMargin = app.api.MiliToHwpUnit(left)\n    p.PageDef.GutterLen = app.api.MiliToHwpUnit(gutter)\n    \n    return action.run()\n\n\nsource\n\n\nApp.insert_picture\n\n App.insert_picture (app:__main__.App, fpath, width=None, height=None,\n                     size_option='realSize', reverse=False,\n                     watermark=False, effect='RealPicture')\n\n사이즈를 지정하여 사진 삽입\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nApp\n\napp\n\n\nfpath\n\n\n그림 위치\n\n\nwidth\nNoneType\nNone\n넓이\n\n\nheight\nNoneType\nNone\n높이\n\n\nsize_option\nstr\nrealSize\n사이즈 옵션\n\n\nreverse\nbool\nFalse\n이미지 반전 여부\n\n\nwatermark\nbool\nFalse\n워커마크 여부\n\n\neffect\nstr\nRealPicture\n화면 효과\n\n\n\n\nsource\n\n\nApp.get_selected_text\n\n App.get_selected_text (app:__main__.App)\n\n선택된 영역의 텍스트를 불러온다.\n\nsource\n\n\nApp.find_text\n\n App.find_text (app:__main__.App, text='', text_fontcolor=None,\n                fontsize=None, fontname='', fonttype=1, fontratio=None,\n                spacing=None, bold=None, italic=None, underline=None,\n                strike_out=None, ignore_message=True, direction='Forward',\n                match_case=False, all_word_forms=False,\n                several_words=False, use_wild_cards=False,\n                whole_word_only=False, replace_mode=False,\n                ignore_find_string=False, ignore_replace_string=False,\n                find_style='', replace_style='', find_jaso=False,\n                find_reg_exp=False, find_type=False)\n\n`text를 찾습니다.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nApp\n\n\n\n\ntext\nstr\n\n\n\n\ntext_fontcolor\nNoneType\nNone\n찾을 폰트 색\n\n\nfontsize\nNoneType\nNone\n찾을 폰트 크기(height)\n\n\nfontname\nstr\n\n찾을 글꼴\n\n\nfonttype\nint\n1\n찾을 글꼴 타입 TTF = 1, HTF = 2\n\n\nfontratio\nNoneType\nNone\n찾을 장평\n\n\nspacing\nNoneType\nNone\n찾을 자간\n\n\nbold\nNoneType\nNone\n찾을 볼드\n\n\nitalic\nNoneType\nNone\n찾을 이텔릭\n\n\nunderline\nNoneType\nNone\n찾을 밑줄\n\n\nstrike_out\nNoneType\nNone\n찾을 취소선\n\n\nignore_message\nbool\nTrue\n메시지 무시 여부\n\n\ndirection\nstr\nForward\n찾을 방향\n\n\nmatch_case\nbool\nFalse\n대소문자 구분\n\n\nall_word_forms\nbool\nFalse\n문자열 결합\n\n\nseveral_words\nbool\nFalse\n여러 단어 찾기\n\n\nuse_wild_cards\nbool\nFalse\n아무개 문자\n\n\nwhole_word_only\nbool\nFalse\n온전한 낱말\n\n\nreplace_mode\nbool\nFalse\n찾아 바꾸기 모드\n\n\nignore_find_string\nbool\nFalse\n찾을 문자열 무시\n\n\nignore_replace_string\nbool\nFalse\n바꿀 문자열 무시\n\n\nfind_style\nstr\n\n찾을 스타일\n\n\nreplace_style\nstr\n\n\n\n\nfind_jaso\nbool\nFalse\n자소로 찾기\n\n\nfind_reg_exp\nbool\nFalse\n정규표현식으로 찾기\n\n\nfind_type\nbool\nFalse\n다시 찾기를 할 때 마지막으로 실한 찾기를 할 경우 True, 찾아가기를 할경우 False\n\n\n\n\napp.find_text(\"안녕하세요\")\n\nTrue\n\n\n\nsource\n\n\nApp.replace_all\n\n App.replace_all (app:__main__.App, old='', new='', old_fontcolor=None,\n                  new_fontcolor=None, old_fontsize=None,\n                  new_fontsize=None, old_fontname='', old_fonttype=1,\n                  new_fontname='', new_fonttype=1, old_fontratio=None,\n                  new_fontratio=None, old_spacing=None, new_spacing=None,\n                  old_bold=None, new_bold=None, old_italic=None,\n                  new_italic=None, old_underline=None, new_underline=None,\n                  old_strike_out=None, new_strike_out=None,\n                  ignore_message=True, direction='All', match_case=False,\n                  all_word_forms=False, several_words=False,\n                  use_wild_cards=False, whole_word_only=False,\n                  auto_spell=True, replace_mode=True,\n                  ignore_find_string=False, ignore_replace_string=False,\n                  find_style='', replace_style='', find_jaso=False,\n                  find_reg_exp=False, find_type=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nApp\n\n\n\n\nold\nstr\n\n\n\n\nnew\nstr\n\n\n\n\nold_fontcolor\nNoneType\nNone\n찾을 폰트 색\n\n\nnew_fontcolor\nNoneType\nNone\n바꿀 폰트 색\n\n\nold_fontsize\nNoneType\nNone\n찾을 폰트 크기(height)\n\n\nnew_fontsize\nNoneType\nNone\n바꿀 폰트 크기(height)\n\n\nold_fontname\nstr\n\n찾을 글꼴\n\n\nold_fonttype\nint\n1\n찾을 글꼴 타입 TTF = 1, HTF = 2\n\n\nnew_fontname\nstr\n\n바꿀 글꼴\n\n\nnew_fonttype\nint\n1\n바꿀 글꼴 타입 TTF = 1, HTF = 2\n\n\nold_fontratio\nNoneType\nNone\n찾을 장평\n\n\nnew_fontratio\nNoneType\nNone\n바꿀 장평\n\n\nold_spacing\nNoneType\nNone\n찾을 자간\n\n\nnew_spacing\nNoneType\nNone\n바꿀 자간\n\n\nold_bold\nNoneType\nNone\n찾을 볼드\n\n\nnew_bold\nNoneType\nNone\n바꿀 볼드\n\n\nold_italic\nNoneType\nNone\n찾을 이텔릭\n\n\nnew_italic\nNoneType\nNone\n바꿀 이텔릭\n\n\nold_underline\nNoneType\nNone\n찾을 밑줄\n\n\nnew_underline\nNoneType\nNone\n바꿀 밑줄\n\n\nold_strike_out\nNoneType\nNone\n찾을 취소선\n\n\nnew_strike_out\nNoneType\nNone\n바꿀 취소선\n\n\nignore_message\nbool\nTrue\n메시지 무시 여부\n\n\ndirection\nstr\nAll\n찾을 방향\n\n\nmatch_case\nbool\nFalse\n대소문자 구분\n\n\nall_word_forms\nbool\nFalse\n문자열 결합\n\n\nseveral_words\nbool\nFalse\n여러 단어 찾기\n\n\nuse_wild_cards\nbool\nFalse\n아무개 문자\n\n\nwhole_word_only\nbool\nFalse\n온전한 낱말\n\n\nauto_spell\nbool\nTrue\n토시 자동 교정\n\n\nreplace_mode\nbool\nTrue\n찾아 바꾸기 모드\n\n\nignore_find_string\nbool\nFalse\n찾을 문자열 무시\n\n\nignore_replace_string\nbool\nFalse\n바꿀 문자열 무시\n\n\nfind_style\nstr\n\n찾을 스타일\n\n\nreplace_style\nstr\n\n바꿀 스타일\n\n\nfind_jaso\nbool\nFalse\n자소로 찾기\n\n\nfind_reg_exp\nbool\nFalse\n정규표현식으로 찾기\n\n\nfind_type\nbool\nTrue\n다시 찾기를 할 때 마지막으로 실한 찾기를 할 경우 True, 찾아가기를 할경우 False\n\n\n\n\napp.replace_all(\"t\", \"txt\", new_fontname=\"가는안상수체\", new_fontsize=21, new_fonttype=1)\n\nFalse\n\n\n\napp.replace_all(\"\", \"\", old_fontname=\"바탕체\", new_fontname=\"바탕체\", ignore_find_string=True, ignore_replace_string=True, new_fontsize=11, new_fonttype=1)\n\nFalse\n\n\n\nsource\n\n\nApp.insert_file\n\n App.insert_file (app:__main__.App, fpath, keep_charshape=False,\n                  keep_parashape=False, keep_section=False,\n                  keep_style=False)\n\n파일 끼워 넣기"
  },
  {
    "objectID": "02_api/variables.html",
    "href": "02_api/variables.html",
    "title": "actions",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nsource\n\n_Action\n\n _Action (app, action_key:str)\n\n한글 Action 클래스 입니다. 엑션의 기능을 사용하기 쉽게 만들고자 했습니다.\n\nsource\n\n\n_Actions\n\n _Actions (app)\n\n사전에 정보가 확인된 Action들을 App에 등록하는 기능을 합니다."
  },
  {
    "objectID": "02_api/fnctions.html",
    "href": "02_api/fnctions.html",
    "title": "functions",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nsource\n\ndispatch\n\n dispatch (app_name:str)\n\n캐시가 충돌하는 문제를 해결하기 위해 실행합니다. 에러가 발생할 경우 기존 캐시를 삭제하고 다시 불러옵니다.\n\nsource\n\n\nget_absolute_path\n\n get_absolute_path (path)\n\n파일 절대 경로를 반환합니다.\n\nsource\n\n\nget_dll_path\n\n get_dll_path (package_name, dll_filename)\n\n패키지에서 dll 경로를 확보합니다.\n\nsource\n\n\nadd_dll_to_registry\n\n add_dll_to_registry (dll_path, key_path)\n\n레지스트리에 dll을 등록합니다.\n\nsource\n\n\nget_registry_value\n\n get_registry_value (key_path, value_name)\n\n레지스트리에 값이 있는지 확인해 봅니다.\n\nsource\n\n\ncheck_dll\n\n check_dll ()\n\ndll 모듈을 등록합니다.\n\nsource\n\n\nget_value\n\n get_value (dict_, key)\n\n딕셔너리에서 키를 찾아 값을 반환합니다. 반환할 값이 없으면 키에러와 함께 가능한 키를 알려줍니다.\n\nsource\n\n\nset_charshape_pset\n\n set_charshape_pset (charshape, face_name:str=None, font_type:int=None,\n                     size:int=None, ratio:int=None, spacing:int=None,\n                     offset:int=None, bold:bool=None, italic:bool=None,\n                     small_caps:bool=None, emboss:bool=None,\n                     super_script:bool=None, sub_script:bool=None,\n                     underline_type:int=None, outline_type:int=None,\n                     text_color=None, shade_color=None,\n                     underline_shape:int=None, underline_color=None,\n                     shadow_offset_x:int=None, shadow_offset_y:int=None,\n                     shadow_color=None, strike_out_type=None,\n                     diac_sym_mark=None, use_font_space=None,\n                     use_kerning=None, height:int=None)\n\nCharShape값을 입력하기 위한 함수입니다. BorderFill은 별도로 “BorderFill”타입을 사용하기 때문에 제외하였습니다.\n\nsource\n\n\nhex_to_rgb\n\n hex_to_rgb (hex_string)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HwpApi",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "HwpApi",
    "section": "Install",
    "text": "Install\n이 패키지는 win32com을 통해 좀더 쉽게 한글 자동화를 하기 위한 패키지 입니다. 따라서, 한글 오피스가 설치된 Windows에서만 작동합니다. 리눅스나 한컴 오피스가 설치된 Mac OS에서는 작동하지 않습니다.\n다른 일반적인 패키지와 같이 아래 명령어를 입력하면 설치할 수 있습니다.\npip install HwpApi"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "HwpApi",
    "section": "How to use",
    "text": "How to use\n기본적으로는 wi32com을 통한 한컴 오피스 자동화를 보다 쉽게 사용하기 위해 개발한 패키지 입니다.\n기존의 연동성을 최대한 유지하면서도 파이써닉하게 코드를 짤 수 있도록 개선하고자 하였습니다.\n\n기존 코드와 연동성 비교하기\n회사원 코딩에 가보시면 아래와 같이 자동화 코드가 있습니다.\nimport win32com.client as win32\nhwp = win32.gencache.EnsureDispatch(\"HWPFrame.HwpObject\")\nhwp.XHwpWindows.Item(0).Visible = True\n\nact = hwp.CreateAction(\"InsertText\")\npset = act.CreateSet()\npset.SetItem(\"Text\", \"Hello\\r\\nWorld!\")\nact.Execute(pset)\n이 코드는 기본적으로 장황하다고 볼 만한 상황입니다. 이 코드를 HwpApi를 사용하면 아래와 같이 간결하게 정리가 됨을 볼 수 있습니다.\n\nfrom HwpApi.core import App\n\napp = App()\naction = app.actions.InsertText()\np = action.pset\np.Text = \"Hello\\r\\nWorld!\"\naction.run()\n\nTrue\n\n\n코드를 보시면 hwp를 세팅하는 부분이 간략해졌습니다. 또한 파라미터 설정이 파이썬 객체처럼 설정할 수 있게 변경 되어 있는 것을 볼 수 있습니다.\n이런 식으로 파이썬에서 사용하기 쉽게 만들었습니다."
  },
  {
    "objectID": "index.html#왜-hwpapi를-만들었나요",
    "href": "index.html#왜-hwpapi를-만들었나요",
    "title": "HwpApi",
    "section": "왜 HwpApi를 만들었나요?",
    "text": "왜 HwpApi를 만들었나요?\n가장 큰 이유는 스스로 사용하기 위해서 입니다. 직장인으로 많은 한글 문서를 편집하고 작성하곤 하는데 단순 반복업무가 너무 많다는 것이 불만이었습니다. 이런 문제를 해결하는 방법으로 한글 자동화에 대한 이야기를 파이콘에서 보게 되었습니다. 특히 ‘회사원 코딩’ 님의 블로그와 영상이 많은 참조가 되었습니다.\n다만 그 과정에서 설명자료가 부족하기도 하고 예전에 작성했던 코드들을 자꾸 찾아보게 되면서 아래아 한글 용 파이썬 패키지가 있으면 좋겠다는 생각을 했습니다. 특히 업무를 하면서 엑셀 자동화를 위해 xlwings를 사용해 보면서 파이썬으로 사용하기 쉽게 만든 라이브러리가 코딩 작업 효율을 엄청 올린다는 것을 깨닫게 되었습니다.\n제출 마감까지 해야 할 일들을 빠르게 하기 위해서 빠르게 한글 자동화가 된다면 좋겠다는 생각으로 만들게 되었습니다.\n기본적인 철학은 xlwings을 따라하고 있습니다. 기본적으로는 자주 쓰이는 항목들을 사용하기 쉽게 정리한 메소드 등으로 구현하고, 부족한 부분은 App.api형태로 win32com으로 하는 것과 동일한 작업이 가능하게 하여 한글 api의 모든 기능을 사용할 수 있도록 구현하였습니다.\n메소드로 만드는 것에는 아직 고민이 있습니다. chain과 같은 형태로 여러가지 콤비네이션을 사전에 세팅을 해야 하나 싶은 부분도 있고 실제로 유용하게 사용할 수 있는 여러가지 아이템 등도 있어서 어떤 부분까지 이 패키지에 구현할지는 고민하고 있습니다.\n다만 이런 형태의 작업을 통해서 어쩌면 hwp api wrapper가 활성화 되어서 단순 작업을 자동화 할 수 있기를 바라고 있습니다."
  }
]