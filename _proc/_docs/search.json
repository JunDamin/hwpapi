[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "gencache error 해결\n캐시가 충돌하는 문제를 해결하기 위해서 장치를 마련했습니다. 오류가 나는지 확인은 필요할 것으로 보입니다.\n\n\n필요한 패키지는\nApp은 기존 hwpapi를 wrapping 하여 보다 사용하기 쉽게 만드는 것을 목적으로 하고 있는 클래스 입니다.\n제가 만든 기능을 사용할 수 있을 뿐만 아니라 HwpApi 한글 컨트롤과 동등한 기능을 부여하고자 하였으며 api 메소드를 통해 win32com의 방식으로 모두 사용할 수 있어 다양하게 사용할 수 있습니다. 기본 메소드를 보다 쓰기 쉽게 만들고자 합니다. 앞으로 추가할 기능은 화면 크기 조정 등이 있습니다.\n기본적으로는 App 클래스와 _Action클래스가 있습니다. _Action 클래스는 App로만 생성되어야 하기 때문에 언더바로 시작합니다.\n\nsource\n\n\nApp\n\n App (api=None)\n\nApp 클래스는 한컴오피스의 한/글 프로그램과 상호작용하기 위한 인터페이스를 제공합니다.\n\nsource\n\n\nApp.set_visible\n\n App.set_visible (app:__main__.App, is_visible=True, window_i=0)\n\nset_visible() 함수는 한/글 프로그램의 창을 화면에 보이거나 숨기기 위해 호출됩니다. is_visible 인자가 True일 경우 창이 화면에 보이고, False일 경우 숨깁니다. window_i 인자는 창의 인덱스를 지정합니다.\n\nsource\n\n\nApp.get_filepath\n\n App.get_filepath (app:__main__.App)\n\nget_filepath() 함수는 현재 열려있는 한/글 문서의 경로를 반환합니다.\n\nimport pywintypes\n\ntry:\n    app = App(app.api)\nexcept NameError:\n    app = App()\nexcept pywintypes.com_error:\n    app = App()\n\n\nsource\n\n\nApp.open\n\n App.open (app:__main__.App, path:str)\n\nopen() 함수는 파일 경로를 인자로 받아 해당 파일을 한/글 프로그램에서 엽니다. get_absolute_path() 함수를 호출하여 절대 경로로 변환한 후, api.Open() 함수를 호출하여 파일을 엽니다. 열린 파일의 경로를 반환합니다.\n\napp.open(r\"C:\\Users\\freed\\Downloads\\일반관리비 관리 자료 작성\\1. Template6_일반관리비template_0309_1730(수정).hwp\")\n\n'C:/Users/freed/Downloads/일반관리비 관리 자료 작성/1. Template6_일반관리비template_0309_1730(수정).hwp'\n\n\n\nsource\n\n\nApp.save\n\n App.save (app:__main__.App, path=None)\n\nsave() 함수는 현재 열려있는 문서를 저장하거나 다른 이름으로 저장합니다. path 인자가 주어지지 않은 경우 현재 문서를 덮어쓰기로 저장하고, 저장된 파일의 경로를 반환합니다. path 인자가 주어진 경우, Path 모듈을 이용하여 파일 확장자를 추출한 후, 해당 확장자에 맞게 문서를 저장합니다. 저장된 파일의 경로를 반환합니다.\n\nsource\n\n\nApp.close\n\n App.close (app:__main__.App)\n\nclose() 함수는 현재 열려있는 문서를 닫습니다.\n\nsource\n\n\nApp.quit\n\n App.quit (app:__main__.App)\n\nquit() 함수는 한/글 프로그램을 종료합니다.\n\nsource\n\n\nApp.create_action\n\n App.create_action (app:__main__.App, action_key:str)\n\ncreate_action() 함수는 _Action 클래스의 객체를 생성하여 반환합니다.\n\nsource\n\n\nApp.create_parameterset\n\n App.create_parameterset (app:__main__.App, action_key:str)\n\ncreate_parameterset() 함수는 특정 액션의 파라미터셋을 반환합니다. _action_info 딕셔너리에서 액션에 대한 정보를 찾아서 파라미터셋의 키 값을 가져옵니다. 파라미터셋 객체를 반환합니다.\n\nsource\n\n\nApp.insert_text\n\n App.insert_text (app:__main__.App, text:str)\n\n`text를 입력합니다.\n\napp.insert_text(\"test\")\n\nTrue\n\n\n\nsource\n\n\nApp.find_files\n\n App.find_files (app:__main__.App)\n\n`text를 입력합니다.\n\n\n\nscan\n\n scan (app:__main__.App, option='All', selection=False,\n       scan_spos='Document', scan_epos='Document', spara=None, spos=None,\n       epara=None, epos=None, scan_direction='Forward')\n\n\nsource\n\n\nApp.move\n\n App.move (app:__main__.App, move_key='ScanPos', para=None, pos=None)\n\n키워드를 바탕으로 캐럿 위치를 이동시킵니다.\n\nget_value(move_ids, \"ScanPos\")\n\n201\n\n\n\nwith app.scan() as scan:\n    for text in scan:\n        print(text)\n        if \"청년인턴\" in text:\n            app.move()\n\n\n\n\n\n(6) 일반관리비 관리 지표의 점수계산을 위한 Template(2)_준정부기관\n\n 준정부기관은 이 양식을 사용하는 것을 원칙으로 하며, 자체수익사업 등이 있는 기관의 경우에는 양식 (5)를 사용할 수 있음. \n\n\n\n\n구분\n\n2022\n\n2021\n\n2020\n\n1. 사업비(직접사업비와 사업비성 경비)와 판관비(또는 경비)\n\n　\n\n　\n\n　\n\n  a. 손익계산서 등의 직접사업비&lt;주1&gt;\n\n968,356,150,820 \n\n844,717,571,019 \n\n743,960,305,518 \n\n  b. 손익계산서 등의 사업비성 경비&lt;주1&gt;\n\n- \n\n- \n\n- \n\n  c. 손익계산서상의 판관비(또는 경비)\n\n52,823,138,260 \n\n45,739,033,709 \n\n44,912,084,147 \n\n 사업비와 판관비 계: (A)=a+b+c\n\n1,021,179,289,080 \n\n890,456,604,728 \n\n788,872,389,665 \n\n2. 사업비 중 제외항목 &lt;주2&gt;\n\n　\n\n　\n\n　\n\n  d. 직접사업비  \n\n938,474,753,330 \n\n820,516,672,451 \n\n708,180,239,253 \n\n  e. 사업비성 경비 \n\n8,976,588,028 \n\n6,289,073,570 \n\n10,647,673,873 \n\n제외항목 총계: (B)=d+e \n\n947,451,341,358 \n\n826,805,746,021 \n\n718,827,913,126 \n\n3. 비정규직 인건비 등 &lt;주3&gt;\n\n　\n\n　\n\n　\n\n\n  f. 비정규직 인건비 등 총계\n\n19,442,425,086 \n\n17,243,943,642 \n\n19,856,530,881 \n\n\n  g. 비정규직 특수건강진단비\n\n- \n\n- \n\n- \n\n\n차감 비정규직 인건비 등: (C) = f-g\n\n19,442,425,086 \n\n17,243,943,642 \n\n19,856,530,881 \n\n4. 비상임이사 인건비(D)&lt;주4&gt;\n\n61,300,000 \n\n76,549,990 \n\n63,850,000 \n\n5. 인상률 제외 인건비 중 기타 제외 인건비(E) &lt;주5&gt;\n\n　\n\n- \n\n- \n\n6. 사내근로복지기금출연금(F) &lt;주6&gt;\n\n　\n\n- \n\n- \n\n7. 감가상각비\n\n　\n\n　\n\n　\n\n  h. 사업비로 처리된 유형자산 감가상각비\n\n439,207,413 \n\n496,001,763 \n\n509,099,787 \n\n  i. 사업비로 처리된 무형자산 감가상각비\n\n- \n\n- \n\n- \n\n  j. 판관비로 처리된 유형자산 감가상각비\n\n8,563,565,655 \n\n8,245,421,190 \n\n8,453,899,310 \n\n  k. 판관비로 처리된 무형자산 감가상각비\n\n2,937,462,955 \n\n2,721,623,724 \n\n2,551,321,675 \n\n감가상각비 총계: (G) = h+i+j+k\n\n11,940,236,023 \n\n11,463,046,677 \n\n11,514,320,772 \n\n8. 교육훈련비 &lt;주7&gt; \n\n　\n\n　\n\n　\n\n  l. 사업비로 처리된 교육훈련비\n\n1,430,893 \n\n38,828,940 \n\n60,983,811 \n\n  m. 판관비로 처리된 교육훈련비\n\n1,450,057,354 \n\n1,360,002,485 \n\n1,263,153,190 \n\n교육훈련비 총계: (H) =l+m\n\n1,451,488,247 \n\n1,398,831,425 \n\n1,324,137,001 \n\n9. 연구비 및 경상개발비 &lt;주7&gt; \n\n　\n\n　\n\n　\n\n  n. 사업비로 처리된 연구비 및 경상개발비\n\n- \n\n- \n\n- \n\n  o. 판관비로 처리된 연구비 및 경상개발비\n\n373,155,890 \n\n323,413,809 \n\n122,238,417 \n\n연구비 및 경상개발비 총계: (I) = n+o\n\n373,155,890 \n\n323,413,809 \n\n122,238,417 \n\n10. 세금과공과 &lt;주7, 8&gt; \n\n　\n\n　\n\n　\n\n  p. 사업비로 처리된 세금과공과\n\n- \n\n- \n\n- \n\n  q. 판관비로 처리된 세금과공과\n\n721,630,836 \n\n647,281,606 \n\n542,776,456 \n\n세금과공과 총계: (J) = p+q\n\n721,630,836 \n\n647,281,606 \n\n542,776,456 \n\n11. 수선유지비 &lt;주7, 9&gt; \n\n　\n\n　\n\n　\n\n  r. 사업비로 처리된 수선유지비\n\n　\n\n　\n\n　\n\n  s. 판관비로 처리된 수선유지비\n\n　\n\n　\n\n　\n\n세금과공과 총계: (K) = r+s\n\n- \n\n- \n\n- \n\n\n일반관리비: \n\n(L)=(A)-(B)+(C)+(D)+(E)+(F)-(G)-(H)-(I)-(J)-(K)\n\n78,745,161,812 \n\n67,138,778,822 \n\n76,461,384,774 \n\n매출액: (M)\n\n1,082,748,153,681 \n\n943,261,080,451 \n\n842,716,245,593 \n\n일반관리비 관리 지표 = (L)/(M)\n\n7.273%\n\n7.118%\n\n9.073test%\n\n\n\n\n\n* 청년인턴이 무기계약직으로 전환된 경우 비교가능성 등 동질성이 유지되도록 전년도 일반관리비 계산 시 당년도에 전환된 무기계약직 인건비 발생액을 전년도 일반관리비에 가산하여 기준치를 조정한 후 일반관리비 관리 점수계산을 할 수 있음\n\n\n\n\n\n@patch\ndef setup_page(\n    app:App,   # app\n    top=20,     # 윗 여백\n    bottom=10,     # 아래 여백\n    right=20,     # 오른쪽 여백\n    left=20,     # 왼쪽 여백\n    header=15,     # 머릿말\n    footer=5,     # 꼬릿말\n    gutter=0):    # 제본\n    \"\"\"\n    페이지를 설정합니다.\n    \"\"\"\n    action = app.actions.PageSetup()\n    p = action.pset\n\n    p.PageDef.TopMargin = app.api.MiliToHwpUnit(top)\n    p.PageDef.HeaderLen = app.api.MiliToHwpUnit(header)\n    p.PageDef.RightMargin = app.api.MiliToHwpUnit(right)\n    p.PageDef.BottomMargin = app.api.MiliToHwpUnit(bottom)\n    p.PageDef.FooterLen = app.api.MiliToHwpUnit(footer)\n    p.PageDef.LeftMargin = app.api.MiliToHwpUnit(left)\n    p.PageDef.GutterLen = app.api.MiliToHwpUnit(gutter)\n    \n    return action.run()\n\n\nsource\n\n\nApp.insert_picture\n\n App.insert_picture (app:__main__.App, fpath, width=None, height=None,\n                     size_option='realSize', reverse=False,\n                     watermark=False, effect='RealPicture')\n\n사이즈를 지정하여 사진 삽입\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nApp\n\napp\n\n\nfpath\n\n\n그림 위치\n\n\nwidth\nNoneType\nNone\n넓이\n\n\nheight\nNoneType\nNone\n높이\n\n\nsize_option\nstr\nrealSize\n사이즈 옵션\n\n\nreverse\nbool\nFalse\n이미지 반전 여부\n\n\nwatermark\nbool\nFalse\n워커마크 여부\n\n\neffect\nstr\nRealPicture\n화면 효과\n\n\n\n\nsource\n\n\nApp.get_selected_text\n\n App.get_selected_text (app:__main__.App)\n\n선택된 영역의 텍스트를 불러온다.\n\nsource\n\n\nApp.replace_all\n\n App.replace_all (app:__main__.App, old='', new='', old_fontcolor=None,\n                  new_fontcolor=None, old_fontsize=None,\n                  new_fontsize=None, old_fontname='', old_fonttype=1,\n                  new_fontname='', new_fonttype=1, old_fontratio=None,\n                  new_fontratio=None, old_spacing=None, new_spacing=None,\n                  old_bold=None, new_bold=None, old_italic=None,\n                  new_italic=None, old_underline=None, new_underline=None,\n                  old_strike_out=None, new_strike_out=None,\n                  ignore_message=True, direction='All', match_case=False,\n                  all_word_forms=False, several_words=False,\n                  use_wild_cards=False, whole_word_only=False,\n                  auto_spell=True, replace_mode=True,\n                  ignore_find_string=False, ignore_replace_string=False,\n                  find_style='', replace_style='', find_jaso=False,\n                  find_reg_exp=False, find_type=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nApp\n\n\n\n\nold\nstr\n\n\n\n\nnew\nstr\n\n\n\n\nold_fontcolor\nNoneType\nNone\n찾을 폰트 색\n\n\nnew_fontcolor\nNoneType\nNone\n바꿀 폰트 색\n\n\nold_fontsize\nNoneType\nNone\n찾을 폰트 크기(height)\n\n\nnew_fontsize\nNoneType\nNone\n바꿀 폰트 크기(height)\n\n\nold_fontname\nstr\n\n찾을 글꼴\n\n\nold_fonttype\nint\n1\n찾을 글꼴 타입 TTF = 1, HTF = 2\n\n\nnew_fontname\nstr\n\n바꿀 글꼴\n\n\nnew_fonttype\nint\n1\n바꿀 글꼴 타입 TTF = 1, HTF = 2\n\n\nold_fontratio\nNoneType\nNone\n찾을 장평\n\n\nnew_fontratio\nNoneType\nNone\n바꿀 장평\n\n\nold_spacing\nNoneType\nNone\n찾을 자간\n\n\nnew_spacing\nNoneType\nNone\n바꿀 자간\n\n\nold_bold\nNoneType\nNone\n찾을 볼드\n\n\nnew_bold\nNoneType\nNone\n바꿀 볼드\n\n\nold_italic\nNoneType\nNone\n찾을 이텔릭\n\n\nnew_italic\nNoneType\nNone\n바꿀 이텔릭\n\n\nold_underline\nNoneType\nNone\n찾을 밑줄\n\n\nnew_underline\nNoneType\nNone\n바꿀 밑줄\n\n\nold_strike_out\nNoneType\nNone\n찾을 취소선\n\n\nnew_strike_out\nNoneType\nNone\n바꿀 취소선\n\n\nignore_message\nbool\nTrue\n메시지 무시 여부\n\n\ndirection\nstr\nAll\n찾을 방향\n\n\nmatch_case\nbool\nFalse\n대소문자 구분\n\n\nall_word_forms\nbool\nFalse\n문자열 결합\n\n\nseveral_words\nbool\nFalse\n여러 단어 찾기\n\n\nuse_wild_cards\nbool\nFalse\n아무개 문자\n\n\nwhole_word_only\nbool\nFalse\n온전한 낱말\n\n\nauto_spell\nbool\nTrue\n토시 자동 교정\n\n\nreplace_mode\nbool\nTrue\n찾아 바꾸기 모드\n\n\nignore_find_string\nbool\nFalse\n찾을 문자열 무시\n\n\nignore_replace_string\nbool\nFalse\n바꿀 문자열 무시\n\n\nfind_style\nstr\n\n찾을 스타일\n\n\nreplace_style\nstr\n\n바꿀 스타일\n\n\nfind_jaso\nbool\nFalse\n자소로 찾기\n\n\nfind_reg_exp\nbool\nFalse\n정규표현식으로 찾기\n\n\nfind_type\nbool\nTrue\n다시 찾기를 할 때 마지막으로 실한 찾기를 할 경우 True, 찾아가기를 할경우 False\n\n\n\n\napp.replace_all(\"t\", \"txt\", new_fontname=\"가는안상수체\", new_fontsize=21, new_fonttype=1)\n\nFalse\n\n\n\napp.replace_all(\"\", \"\", old_fontname=\"바탕체\", new_fontname=\"바탕체\", ignore_find_string=True, ignore_replace_string=True, new_fontsize=11, new_fonttype=1)\n\nFalse\n\n\n\nsource\n\n\nApp.insert_file\n\n App.insert_file (app:__main__.App, fpath, keep_charshape=False,\n                  keep_parashape=False, keep_section=False,\n                  keep_style=False)\n\n파일 끼워 넣기\n한글 문서 사용은 다음과 같이 할 수 있습니다. 먼저 App 객체를 생성합니다.\n\napp.get_selected_text()\n\n'연구비 및 경상개발비 총계: (I) = n+o\\n'\n\n\n\np = app.actions.InsertFile().pset\n\n\ndir(p)\n\n['CLSID',\n 'CreateItemArray',\n 'FileArg',\n 'FileFormat',\n 'HSet',\n 'KeepCharshape',\n 'KeepParashape',\n 'KeepSection',\n 'KeepStyle',\n '_ApplyTypes_',\n '__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattr__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_get_good_object_',\n '_get_good_single_object_',\n '_oleobj_',\n '_prop_map_get_',\n '_prop_map_put_',\n 'coclass_clsid',\n 'filename']"
  },
  {
    "objectID": "variables.html",
    "href": "variables.html",
    "title": "actions",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload"
  },
  {
    "objectID": "fnctions.html",
    "href": "fnctions.html",
    "title": "functions",
    "section": "",
    "text": "source\n\nget_absolute_path\n\n get_absolute_path (path)\n\n\nsource\n\n\nget_dll_path\n\n get_dll_path (package_name, dll_filename)\n\n\nsource\n\n\nget_registry_value\n\n get_registry_value (key_path, value_name)\n\n\nsource\n\n\nadd_dll_to_registry\n\n add_dll_to_registry (dll_path, key_path)\n\n\nsource\n\n\ncheck_dll\n\n check_dll ()\n\n\nsource\n\n\nget_value\n\n get_value (dict_, key)\n\n\n\n\nset_charshape\n\n set_charshape (charshape, fontname:str, font_type:int, fontcolor,\n                fontsize:int, bold:bool, intalic:bool, strike_out,\n                under_line, fontratio)"
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "methods",
    "section": "",
    "text": "source\n\nApp.insert_text\n\n App.insert_text (app:HwpApi.core.App, text:str)\n\n`text를 입력합니다."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HwpApi",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "HwpApi",
    "section": "Install",
    "text": "Install\n이 패키지는 win32com을 통해 좀더 쉽게 한글 자동화를 하기 위한 패키지 입니다. 따라서, 한글 오피스가 설치된 Windows에서만 작동합니다. 리눅스나 한컴 오피스가 설치된 Mac OS에서는 작동하지 않습니다.\n다른 일반적인 패키지와 같이 아래 명령어를 입력하면 설치할 수 있습니다.\npip install HwpApi"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "HwpApi",
    "section": "How to use",
    "text": "How to use\n기본적으로는 wi32com을 통한 한컴 오피스 자동화를 보다 쉽게 사용하기 위해 개발한 패키지 입니다.\n기존의 연동성을 최대한 유지하면서도 파이써닉하게 코드를 짤 수 있도록 개선하고자 하였습니다.\n\n기존 코드와 연동성 비교하기\n회사원 코딩에 가보시면 아래와 같이 자동화 코드가 있습니다.\nimport win32com.client as win32\nhwp = win32.gencache.EnsureDispatch(\"HWPFrame.HwpObject\")\nhwp.XHwpWindows.Item(0).Visible = True\n\nact = hwp.CreateAction(\"InsertText\")\npset = act.CreateSet()\npset.SetItem(\"Text\", \"Hello\\r\\nWorld!\")\nact.Execute(pset)\n이 코드는 기본적으로 장황하다고 볼 만한 상황입니다. 이 코드를 HwpApi를 사용하면 아래와 같이 간결하게 정리가 됨을 볼 수 있습니다.\n\nfrom HwpApi.core import App\n\napp = App()\naction = app.actions.InsertText()\np = action.pset\np.Text = \"Hello\\r\\nWorld!\"\naction.run()\n\nTrue\n\n\n코드를 보시면 hwp를 세팅하는 부분이 간략해졌습니다. 또한 파라미터 설정이 파이썬 객체처럼 설정할 수 있게 변경 되어 있는 것을 볼 수 있습니다.\n이런 식으로 파이썬에서 사용하기 쉽게 만들었습니다."
  },
  {
    "objectID": "index.html#왜-hwpapi를-만들었나요",
    "href": "index.html#왜-hwpapi를-만들었나요",
    "title": "HwpApi",
    "section": "왜 HwpApi를 만들었나요?",
    "text": "왜 HwpApi를 만들었나요?\n가장 큰 이유는 스스로 사용하기 위해서 입니다. 직장인으로 많은 한글 문서를 편집하고 작성하곤 하는데 단순 반복업무가 너무 많다는 것이 불만이었습니다. 이런 문제를 해결하는 방법으로 한글 자동화에 대한 이야기를 파이콘에서 보게 되었습니다. 특히 ‘회사원 코딩’ 님의 블로그와 영상이 많은 참조가 되었습니다.\n다만 그 과정에서 설명자료가 부족하기도 하고 예전에 작성했던 코드들을 자꾸 찾아보게 되면서 아래아 한글 용 파이썬 패키지가 있으면 좋겠다는 생각을 했습니다. 특히 업무를 하면서 엑셀 자동화를 위해 xlwings를 사용해 보면서 파이썬으로 사용하기 쉽게 만든 라이브러리가 코딩 작업 효율을 엄청 올린다는 것을 깨닫게 되었습니다.\n제출 마감까지 해야 할 일들을 빠르게 하기 위해서 빠르게 한글 자동화가 된다면 좋겠다는 생각으로 만들게 되었습니다.\n기본적인 철학은 xlwings을 따라하고 있습니다. 기본적으로는 자주 쓰이는 항목들을 사용하기 쉽게 정리한 메소드 등으로 구현하고, 부족한 부분은 App.api형태로 win32com으로 하는 것과 동일한 작업이 가능하게 하여 한글 api의 모든 기능을 사용할 수 있도록 구현하였습니다.\n메소드로 만드는 것에는 아직 고민이 있습니다. chain과 같은 형태로 여러가지 콤비네이션을 사전에 세팅을 해야 하나 싶은 부분도 있고 실제로 유용하게 사용할 수 있는 여러가지 아이템 등도 있어서 어떤 부분까지 이 패키지에 구현할지는 고민하고 있습니다.\n다만 이런 형태의 작업을 통해서 어쩌면 hwp api wrapper가 활성화 되어서 단순 작업을 자동화 할 수 있기를 바라고 있습니다."
  },
  {
    "objectID": "index.html#기존-코드와-연동성-비교하기",
    "href": "index.html#기존-코드와-연동성-비교하기",
    "title": "HwpApi",
    "section": "기존 코드와 연동성 비교하기",
    "text": "기존 코드와 연동성 비교하기\n회사원 코딩에 가보시면 아래와 같이 자동화 코드가 있습니다.\nimport win32com.client as win32\nhwp = win32.gencache.EnsureDispatch(\"HWPFrame.HwpObject\")\nhwp.XHwpWindows.Item(0).Visible = True\n\nact = hwp.CreateAction(\"InsertText\")\npset = act.CreateSet()\npset.SetItem(\"Text\", \"Hello\\r\\nWorld!\")\nact.Execute(pset)\n이 코드는 기본적으로 verbose라고 볼 만한 상황입니다. 이 코드를 HwpApi를 사용하면 아래와 같이 간결하게 정리가 됨을 볼 수 있습니다.\n\nfrom HwpApi.core import App\n\napp = App()\naction = app.actions.InsertText()\np = action.pset\np.Text = \"Hello\\r\\nWorld!\"\naction.run()\n\nTrue\n\n\nvim 맵핑은 상당히 편리한 기능으로 보입니다. 특히 이게 편리한 이유는 여러가지가 있겠지만, 가장 큰 이유는 코드를 편집하거나 할 때 유용한 기능을 제공하기 때문인 것으로 보입니다. ESC키를 쓰는 건 습관을 만들면 될 것 같기도 합니다. 특히 Jupyter lab이나 아마도 Jupyter notebook에서도 유사하게 동작할 것으로 보입니다만, 각 셀에서 vim 나가기 기능을 통해서 셀 선택 기능으로 나갈 수 있고 이는 상당히 큰 메리트가 됩니다. 모든 작업을 키보드로만 가능하게 해주는 기능으로 보입니다.\n이렇게 되면 키 맵핑을 해서 많은 작업을 자동화 할 수 있을 것으로 보입니다. 특히 Caps Lock은 거의 쓰이지 않음에도 위치가 아주 좋은 점을 고려할 때 Key Mapping을 바꾸고 자주 쓰이는 ESC키를 쓰는 건 유용한 것으로 판단됩니다."
  }
]