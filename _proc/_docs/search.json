[
  {
    "objectID": "01_tutorials/tutorial.html",
    "href": "01_tutorials/tutorial.html",
    "title": "튜토리얼",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n한컴 오피스는 액션이라는 것을 통해서 다양한 문서 편집을 가능하게 하고 있습니다. 그런 편집을 파이썬에서 보다 쉽게 사용하기 위해 만든 라이브러리입니다.\n기본적인 컨셉은 win32com을 쉽게 사용할 수 있게 개편한 것입니다.\n문서 편집의 기본 기능인 1. 문장 입력하기 2. 커서 이동하기 2. 영역 선택하기 2. 서식 변경하기 3. 텍스트 가져오기\nfrom hwpapi.core import App\nApp은 기존 hwpapi를 wrapping 하여 보다 사용하기 쉽게 만드는 것을 목적으로 하고 있는 클래스 입니다.\nhwpapi는 한글 컨트롤을 조합해서 자주사용했던 기능을 구현하였습니다. 또한, api 메소드를 통해 win32com의 방식으로 모두 사용할 수 있어 다양하게 사용할 수 있습니다.\n아래와 같이 App 객체를 생성하면 한글이 열립니다.\napp = App()\n한글을 조작할 때는 크게 action과 hwpctrl method로 나눌 수 있습니다. action은 파라미터를 설정하고 그것을 실행시켜서 작동하는 방식으로 사용자 단축키를 누르면 실행되는 명령에 가깝다면 hwpctrl method는 한글 자동화 모듈이 제공하는 것으로 사용자 입력에서는 신경쓰지 않아도 될 부분들을 처리하는 것이라고 보시면 됩니다.\n공식 개발 매뉴얼에 여러 action과 parameter, method의 설명을 제공하고 있습니다. 아쉽게도 문서가 잘 관리되고 있지는 않으며, hwpctrl의 method들을 보면 명시되어 있지 않은 기능들이 개발되어 있음을 알 수 있습니다.\n앞으로 개발해 나가면서 확인된 액션과 메소드 들을 정리해 나가고자 합니다.\naction은 app에서 생성할 수 있습니다. 방식은 크게 2가지로 직접 action key를 입력하는 방법과 actions에 있는 action 객체를 생성하는 방법이 있습니다. 아래 두 방식은 동일한 Action 객체를 생성합니다.\naction1 = app.create_action(\"InsertText\")\naction1\n\n&lt;Action InsertText: 텍스트 삽입&gt;\naction2 = app.actions.InsertText()\naction2\n\n&lt;Action InsertText: 텍스트 삽입&gt;\nDelete(지우기), BreakPara(줄바꿈) 등 많은 action은 파라미터 세팅이 필요 없습니다. 하지만 위에서 생성한 InsertText객체는 입력할 텍스트 값을 넣어주어야 합니다. 이는 parameter를 통해 설정할 수 있습니다.\naction1.pset.Text = \"입력하기\"\n파라미터를 설정한 후 다음과 같이 액션을 실행하면 텍스트가 입력되는 걸 볼 수 있습니다.\naction1.run()\n\nTrue\ncharshape = app.actions.CharShape()\ncharshape.pset.Height = app.api.PointToHwpUnit(20)\ncharshape.run()\n\nTrue\naction2.pset.Text = \"크게 입력하기\"\naction2.run()\n\nTrue"
  },
  {
    "objectID": "01_tutorials/tutorial.html#입력하기",
    "href": "01_tutorials/tutorial.html#입력하기",
    "title": "튜토리얼",
    "section": "입력하기",
    "text": "입력하기\n입력은 가장 자주 사용하는 것이기 때문에 다음과 같이 App의 메소드로 만들었습니다.\n\napp.insert_text(\"더 크게 입력하기\", height=30)\n\n\naction = app.actions.Select()"
  },
  {
    "objectID": "01_tutorials/tutorial.html#이동하기",
    "href": "01_tutorials/tutorial.html#이동하기",
    "title": "튜토리얼",
    "section": "이동하기",
    "text": "이동하기\n크게 두가지 방법이 있습니다.\n액션을 사용하는 방법과 단어를 찾아가는 방법이 있습니다.\n\napp.actions.MoveColumnBegin().run()\n\nTrue\n\n\nactions를 아래와 같이 하여 찾는 경로를 깗게 할 수도 있습니다.\n\nactions = app.actions\nactions.MoveColumnBegin().run()\n\nTrue\n\n\n\napp.find_text(\"해해\")\n\nFalse"
  },
  {
    "objectID": "01_tutorials/tutorial.html#텍스트-선택하기",
    "href": "01_tutorials/tutorial.html#텍스트-선택하기",
    "title": "튜토리얼",
    "section": "텍스트 선택하기",
    "text": "텍스트 선택하기\n문서에서 드래그한 것과 같이 영역을 선택할 수 있습니다.\n\napp.select_text(\"Para\")\n\n(True, True)"
  },
  {
    "objectID": "01_tutorials/tutorial.html#서식-넣기",
    "href": "01_tutorials/tutorial.html#서식-넣기",
    "title": "튜토리얼",
    "section": "서식 넣기",
    "text": "서식 넣기\n선택한 영역에 글자 서식을 넣을 수 있습니다.\n\napp.set_charshape(fontname=\"바탕체\", height=25, bold=True)\n\nTrue\n\n\n문단 서식 또한 가능합니다.\n\napp.set_parashape(left_margin=50)\n\nTrue"
  },
  {
    "objectID": "01_tutorials/tutorial.html#텍스트-가져오기",
    "href": "01_tutorials/tutorial.html#텍스트-가져오기",
    "title": "튜토리얼",
    "section": "텍스트 가져오기",
    "text": "텍스트 가져오기\n현재 위치의 문장이나 텍스트를 가져 올 수 있습니다. 기본은 현재 문장의 시작에서 문장의 끝을 선택합니다.\n\napp.get_text()\n\n'입력하기크게 입력하기더 크게 입력하기\\r\\n'\n\n\n선택 영역만 가져올 수도 있습니다.\n\napp.get_selected_text()\n\n'입력하기크게 입력하기더 크게 입력하기\\n'"
  },
  {
    "objectID": "01_tutorials/find_and_replace.html",
    "href": "01_tutorials/find_and_replace.html",
    "title": "Find and replace",
    "section": "",
    "text": "문서 작업을 하면서 같은 의미지만 다르게 작성하여 형식을 통일하기 위해 문서를 처음부터 검토해야 하는 경우가 있습니다. 예를 들어 “2022년”이라고 쓰는 경우도 있고 “’22년”으로 적는 경우도 있습니다. 이를 모두 2022년으로 작성 방식을 통일하고자 한다면 찾아바꾸기를 통해 쉽게 달성할 수 있습니다.\n만약 이런 바꿔야 하는 단어가 수십개가 된다면 어떻게 될까요? 붙여써야 하는 경우, 자주 틀리는 오탈자, 영문명으로 바로 작성하거나 이니셜로만 작성하는 등, 수십개의 케이스를 모두 적용하는 것은 상당히 귀찮고 오류가 발생하기 쉬운 일입니다.\n이런 문제를 hwpapi를 사용해 해결해 보고자 합니다.\n국토부 보도자료를 보면 임대차 시장 안정 및 3분기 부동산 정상화 방안이라는 문서를 볼 수 있습니다.\n여기서 보면 ’주거 안정’이라고 띄어 쓴 경우와 ’주거안정’이라고 붙여쓴 경우가 있습니다. \n유사하게 ’분양가 상한제’와 같이 띄어 쓴 경우와 ’분양가상한제’라고 붙여 쓴 경우가 있죠.  \n또한 ’시범사업지’와 ’시범 사업지’와 같이 경우에 따라 붙이거나 띄는 경우는 한국어 특성상 자주 발생합니다. \n이런 항목을 모두 붙여 쓰는 스크립트를 짜보도록 하겠습니다.\n해야 할 일은\n\n문서 불러오기\n기존과 변경할 것 목록 만들기\n찾아 바꾸기\n\n이렇게 3단계로 구성됩니다.\n\n\n우선 패키지를 불러오고 문서를 불러 옵니다. 저는 hwps/220621(안건_1,2)임대차_시장_안정_및_3분기_부동산_정상화_방안.hwp 파일을 읽어 오겠습니다.\n\nfrom hwpapi.core import App\n\napp = App()\napp.open(\"hwps/220621(안건_1,2)임대차_시장_안정_및_3분기_부동산_정상화_방안.hwp\")\n\n\n\n\n아래와 같이 기존 단어와 변경할 단어를 만들어 둡니다. 여기서는 단순히 list를 사용했지만, pandas 등을 사용하면 엑셀 파일에서 관리할 수 있습니다.\n\nwords = [(\"분양가 상한제\", \"분양가상한제\"), (\"주거안정\", \"주거 안정\"), (\"시범사업지\", \"시범 사업지\")]\n\n\n\n\n이렇게 까지 되면 나머지는 간단합니다. words를 순환 하면서 반복해 주기만 하면 됩니다. 모두 찾아바꾸기를 하면 어디를 바꾸었는지 확인하기 어렵기 때문에 바꾼 단어는 붉은 색으로 처리해서 쉽게 눈으로 확인해 볼 수 있게 하겠습니다. 그러기 위해서 CharShape이라고 하는 dataclass를 불러오겠습니다.\n\nfrom hwpapi.dataclasses import CharShape\n\nfor old, new in words:\n    app.replace_all(old, new, new_charshape=CharShape(text_color=\"#FF0000\"))\n\n코드를 실행하고 나면 아래와 같이 바뀐 단어는 붉은색으로 표시되게 됩니다.  \n이렇게 변경된 사항을 눈으로 확인하고 최종적으로 단축키 등으로 정리하면 문서 전체적으로 맞춰야 하는 단어나 자주 틀리는 오탈자를 쉽게 관리 할 수 있게 됩니다.\n\napp.move(\"DownOCell\")\n\n\ndir(app.api)\n\n\napp.api.KeyIndicator()\n\n\napp.api.KeyIndicator()\n\n\ndir(app.api.ParentCtrl)"
  },
  {
    "objectID": "01_tutorials/find_and_replace.html#문제설정",
    "href": "01_tutorials/find_and_replace.html#문제설정",
    "title": "Find and replace",
    "section": "",
    "text": "문서 작업을 하면서 같은 의미지만 다르게 작성하여 형식을 통일하기 위해 문서를 처음부터 검토해야 하는 경우가 있습니다. 예를 들어 “2022년”이라고 쓰는 경우도 있고 “’22년”으로 적는 경우도 있습니다. 이를 모두 2022년으로 작성 방식을 통일하고자 한다면 찾아바꾸기를 통해 쉽게 달성할 수 있습니다.\n만약 이런 바꿔야 하는 단어가 수십개가 된다면 어떻게 될까요? 붙여써야 하는 경우, 자주 틀리는 오탈자, 영문명으로 바로 작성하거나 이니셜로만 작성하는 등, 수십개의 케이스를 모두 적용하는 것은 상당히 귀찮고 오류가 발생하기 쉬운 일입니다.\n이런 문제를 hwpapi를 사용해 해결해 보고자 합니다.\n국토부 보도자료를 보면 임대차 시장 안정 및 3분기 부동산 정상화 방안이라는 문서를 볼 수 있습니다.\n여기서 보면 ’주거 안정’이라고 띄어 쓴 경우와 ’주거안정’이라고 붙여쓴 경우가 있습니다. \n유사하게 ’분양가 상한제’와 같이 띄어 쓴 경우와 ’분양가상한제’라고 붙여 쓴 경우가 있죠.  \n또한 ’시범사업지’와 ’시범 사업지’와 같이 경우에 따라 붙이거나 띄는 경우는 한국어 특성상 자주 발생합니다. \n이런 항목을 모두 붙여 쓰는 스크립트를 짜보도록 하겠습니다.\n해야 할 일은\n\n문서 불러오기\n기존과 변경할 것 목록 만들기\n찾아 바꾸기\n\n이렇게 3단계로 구성됩니다.\n\n\n우선 패키지를 불러오고 문서를 불러 옵니다. 저는 hwps/220621(안건_1,2)임대차_시장_안정_및_3분기_부동산_정상화_방안.hwp 파일을 읽어 오겠습니다.\n\nfrom hwpapi.core import App\n\napp = App()\napp.open(\"hwps/220621(안건_1,2)임대차_시장_안정_및_3분기_부동산_정상화_방안.hwp\")\n\n\n\n\n아래와 같이 기존 단어와 변경할 단어를 만들어 둡니다. 여기서는 단순히 list를 사용했지만, pandas 등을 사용하면 엑셀 파일에서 관리할 수 있습니다.\n\nwords = [(\"분양가 상한제\", \"분양가상한제\"), (\"주거안정\", \"주거 안정\"), (\"시범사업지\", \"시범 사업지\")]\n\n\n\n\n이렇게 까지 되면 나머지는 간단합니다. words를 순환 하면서 반복해 주기만 하면 됩니다. 모두 찾아바꾸기를 하면 어디를 바꾸었는지 확인하기 어렵기 때문에 바꾼 단어는 붉은 색으로 처리해서 쉽게 눈으로 확인해 볼 수 있게 하겠습니다. 그러기 위해서 CharShape이라고 하는 dataclass를 불러오겠습니다.\n\nfrom hwpapi.dataclasses import CharShape\n\nfor old, new in words:\n    app.replace_all(old, new, new_charshape=CharShape(text_color=\"#FF0000\"))\n\n코드를 실행하고 나면 아래와 같이 바뀐 단어는 붉은색으로 표시되게 됩니다.  \n이렇게 변경된 사항을 눈으로 확인하고 최종적으로 단축키 등으로 정리하면 문서 전체적으로 맞춰야 하는 단어나 자주 틀리는 오탈자를 쉽게 관리 할 수 있게 됩니다.\n\napp.move(\"DownOCell\")\n\n\ndir(app.api)\n\n\napp.api.KeyIndicator()\n\n\napp.api.KeyIndicator()\n\n\ndir(app.api.ParentCtrl)"
  },
  {
    "objectID": "02_api/core.html",
    "href": "02_api/core.html",
    "title": "core",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "02_api/core.html#section",
    "href": "02_api/core.html#section",
    "title": "core",
    "section": "",
    "text": "cell을 순환하면서 모양을 잡을 수 있을 것으로 예상된다. 6개 값을 받아서 정렬하면 되지 않을까 싶다.\n\ninsert_dataframe(app, df)\napp.api.FindCtrl()\napp.actions.ShapeObjTextBoxEdit().run()\napp.set_cell_border(False, False)\nfor _ in range(10):\n    app.actions.TableCellBlockRow().run()\n    app.set_cell_color(bg_color=(253, 123, 253), hatch_style=6)\n    app.set_cell_border(False, False, False, False)\n\n    app.actions.TableCellBlock().run()\n    app.move(\"DownOfCell\")\n\n\n\n\nTrue"
  },
  {
    "objectID": "02_api/actions.html",
    "href": "02_api/actions.html",
    "title": "actions",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nsource\n\n_Action\n\n _Action (app, action_key:str)\n\n한글 Action 클래스 입니다. 엑션의 기능을 사용하기 쉽게 만들고자 했습니다.\n\nsource\n\n\n_Actions\n\n _Actions (app)\n\n사전에 정보가 확인된 Action들을 App에 등록하는 기능을 합니다."
  },
  {
    "objectID": "02_api/functions.html",
    "href": "02_api/functions.html",
    "title": "functions",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nsource\n\nget_font_name\n\n get_font_name (text)\n\n\nsource\n\n\ndispatch\n\n dispatch (app_name)\n\n캐시가 충돌하는 문제를 해결하기 위해 실행합니다. 에러가 발생할 경우 기존 캐시를 삭제하고 다시 불러옵니다.\n\n\n\nget_hwp_objects\n\n get_hwp_objects ()\n\n\nsource\n\n\nget_absolute_path\n\n get_absolute_path (path)\n\n파일 절대 경로를 반환합니다.\n\nsource\n\n\nget_dll_path\n\n get_dll_path (package_name, dll_filename)\n\n패키지에서 dll 경로를 확보합니다.\n\nsource\n\n\nadd_dll_to_registry\n\n add_dll_to_registry (dll_path, key_path)\n\n레지스트리에 dll을 등록합니다.\n\nsource\n\n\nget_registry_value\n\n get_registry_value (key_path, value_name)\n\n레지스트리에 값이 있는지 확인해 봅니다.\n\nsource\n\n\ncheck_dll\n\n check_dll (dll_path=None)\n\ndll 모듈을 등록합니다.\n\nsource\n\n\nget_value\n\n get_value (dict_, key)\n\n딕셔너리에서 키를 찾아 값을 반환합니다. 반환할 값이 없으면 키에러와 함께 가능한 키를 알려줍니다.\n\nsource\n\n\nget_key\n\n get_key (dict_, value)\n\n딕셔너리에서 값를 찾아 키를 반환합니다. 반환할 값이 없으면 키에러와 함께 가능한 키를 알려줍니다.\n\nsource\n\n\nconvert2int\n\n convert2int (_dict, value)\n\n\nsource\n\n\nset_pset\n\n set_pset (p, value_dict:dict)\n\n\nsource\n\n\nget_charshape_pset\n\n get_charshape_pset (p)\n\n\nsource\n\n\nset_charshape_pset\n\n set_charshape_pset (charshape_pset, value_dict:dict)\n\nCharShape값을 입력하기 위한 함수입니다. char_fields에 정의된 키 값을 기반으로 파라미터를 세팅합니다.\n\nsource\n\n\nget_parashape_pset\n\n get_parashape_pset (p)\n\n\nsource\n\n\nset_parashape_pset\n\n set_parashape_pset (parashape_pset, value_dict:dict)\n\n\nsource\n\n\nget_rgb_tuple\n\n get_rgb_tuple (color)\n\n\nsource\n\n\nhex_to_rgb\n\n hex_to_rgb (hex_string)\n\n\nsource\n\n\nconvert_to_hwp_color\n\n convert_to_hwp_color (color)\n\n\nsource\n\n\nconvert_hwp_color_to_hex\n\n convert_hwp_color_to_hex (color:int)\n\n\nprint(convert_to_hwp_color(\"00FFFF\"))  # Outputs: 65535\nprint(convert_to_hwp_color((0, 255, 255)))  # Outputs: 65535\n\n16776960\n16776960\n\n\n\nsource\n\n\nmili2unit\n\n mili2unit (value)\n\n1 밀리는 283 hwpunit 입니다.\n\nsource\n\n\nunit2mili\n\n unit2mili (value)\n\n\nsource\n\n\npoint2unit\n\n point2unit (value)\n\n1point는 100 hwpunit입니다.\n\nsource\n\n\nunit2point\n\n unit2point (value)\n\n\n\n\nblock_input\n\n block_input (func)\n\n함수가 실행될 동안 다른 입력을 할 수 없게 하는 기능을 가진 데코레이터입니다."
  },
  {
    "objectID": "02_api/dataclasses.html",
    "href": "02_api/dataclasses.html",
    "title": "dataclasses",
    "section": "",
    "text": "source\n\nCharacter\n\n Character (Bold:Optional[int]=None, DiacSymMark:Optional[int]=None,\n            Emboss:Optional[int]=None, Engrave:Optional[int]=None,\n            FaceNameHangul:Optional[str]=None,\n            FaceNameHanja:Optional[str]=None,\n            FaceNameJapanese:Optional[str]=None,\n            FaceNameLatin:Optional[str]=None,\n            FaceNameOther:Optional[str]=None,\n            FaceNameSymbol:Optional[str]=None,\n            FaceNameUser:Optional[str]=None,\n            FontTypeHangul:Optional[int]=None,\n            FontTypeHanja:Optional[int]=None,\n            FontTypeJapanese:Optional[int]=None,\n            FontTypeLatin:Optional[int]=None,\n            FontTypeOther:Optional[int]=None,\n            FontTypeSymbol:Optional[int]=None,\n            FontTypeUser:Optional[int]=None, Height:Optional[int]=None,\n            Italic:Optional[int]=None, OffsetHangul:Optional[int]=None,\n            OffsetHanja:Optional[int]=None,\n            OffsetJapanese:Optional[int]=None,\n            OffsetLatin:Optional[int]=None,\n            OffsetOther:Optional[int]=None,\n            OffsetSymbol:Optional[int]=None,\n            OffsetUser:Optional[int]=None, OutLineType:Optional[int]=None,\n            RatioHangul:Optional[int]=None, RatioHanja:Optional[int]=None,\n            RatioJapanese:Optional[int]=None,\n            RatioLatin:Optional[int]=None, RatioOther:Optional[int]=None,\n            RatioSymbol:Optional[int]=None, RatioUser:Optional[int]=None,\n            ShadeColor:Optional[int]=None, ShadowColor:Optional[int]=None,\n            ShadowOffsetX:Optional[int]=None,\n            ShadowOffsetY:Optional[int]=None,\n            ShadowType:Optional[int]=None, SizeHangul:Optional[int]=None,\n            SizeHanja:Optional[int]=None, SizeJapanese:Optional[int]=None,\n            SizeLatin:Optional[int]=None, SizeOther:Optional[int]=None,\n            SizeSymbol:Optional[int]=None, SizeUser:Optional[int]=None,\n            SmallCaps:Optional[int]=None,\n            SpacingHangul:Optional[int]=None,\n            SpacingHanja:Optional[int]=None,\n            SpacingJapanese:Optional[int]=None,\n            SpacingLatin:Optional[int]=None,\n            SpacingOther:Optional[int]=None,\n            SpacingSymbol:Optional[int]=None,\n            SpacingUser:Optional[int]=None,\n            StrikeOutColor:Optional[int]=None,\n            StrikeOutShape:Optional[int]=None,\n            StrikeOutType:Optional[int]=None,\n            SubScript:Optional[int]=None, SuperScript:Optional[int]=None,\n            TextColor:Optional[int]=None,\n            UnderlineColor:Optional[int]=None,\n            UnderlineShape:Optional[int]=None,\n            UnderlineType:Optional[int]=None,\n            UseFontSpace:Optional[int]=None,\n            UseKerning:Optional[int]=None)\n\nC:\\Users\\freed\\.pyenv\\pyenv-win\\versions\\3.10.1\\lib\\site-packages\\fastcore\\docscrape.py:225: UserWarning: potentially wrong underline length... \n메서드 \n------- in \nCharShape 클래스는 문자 모양을 다룹니다. CharShape는 폰트, 색상, 크기 및 스타일과 같이 문자에 적용된 스타일링 속성의 전체 세트를 나타냅니다.\n...\n  else: warn(msg)\nC:\\Users\\freed\\.pyenv\\pyenv-win\\versions\\3.10.1\\lib\\site-packages\\fastcore\\docscrape.py:225: UserWarning: Unknown section 메서드\n  else: warn(msg)\n\nsource\n\n\nCharShape\n\n CharShape (char_pset=None, **kwargs)\n\nCharShape 클래스는 문자 모양을 다룹니다. CharShape는 폰트, 색상, 크기 및 스타일과 같이 문자에 적용된 스타일링 속성의 전체 세트를 나타냅니다.\n\ncharshape = CharShape()\ncharshape\n\n&lt;CharShape: hangul_font=None, latin_font=None, text_color=None, fontsize=None, bold=None, italic=None, super_script=None, sub_script=None, offset=None, spacing=None, ratio=None, shade_color=None, shadow_color=None, shadow_offset_x=None, shadow_offset_y=None, strike_out_type=None, strike_out_color=None, underline_type=None, underline_shape=None, underline_color=None, out_line_type=None&gt;\n\n\n\ncharshape.super_script = 1\ncharshape.todict()\n\n{'SuperScript': 1}\n\n\n\ncharshape.super_script = 0\ncharshape.todict()\n\n{'SuperScript': 0}\n\n\n\nsource\n\n\nParagraph\n\n Paragraph (AlignType:Optional[int]=None,\n            AutoSpaceEAsianEng:Optional[int]=None,\n            AutoSpaceEAsianNum:Optional[int]=None,\n            BorderConnect:Optional[int]=None,\n            BorderOffsetBottom:Optional[int]=None,\n            BorderOffsetLeft:Optional[int]=None,\n            BorderOffsetRight:Optional[int]=None,\n            BorderOffsetTop:Optional[int]=None,\n            BorderText:Optional[int]=None,\n            BreakLatinWord:Optional[int]=None,\n            BreakNonLatinWord:Optional[int]=None,\n            Checked:Optional[int]=None, Condense:Optional[int]=None,\n            FontLineHeight:Optional[int]=None,\n            HeadingType:Optional[int]=None,\n            Indentation:Optional[int]=None,\n            KeepLinesTogether:Optional[int]=None,\n            KeepWithNext:Optional[int]=None,\n            LeftMargin:Optional[int]=None, Level:Optional[int]=None,\n            LineSpacing:Optional[int]=None,\n            LineSpacingType:Optional[int]=None,\n            LineWrap:Optional[int]=None, NextSpacing:Optional[int]=None,\n            PagebreakBefore:Optional[int]=None,\n            PrevSpacing:Optional[int]=None,\n            RightMargin:Optional[int]=None, SnapToGrid:Optional[int]=None,\n            SuppressLineNum:Optional[int]=None,\n            TailType:Optional[int]=None, TextAlignment:Optional[int]=None,\n            WidowOrphan:Optional[int]=None)\n\nC:\\Users\\freed\\.pyenv\\pyenv-win\\versions\\3.10.1\\lib\\site-packages\\fastcore\\docscrape.py:225: UserWarning: potentially wrong underline length... \n속성 \n---- in \nParaShape 클래스는 문단 모양을 다룹니다. ParaShape는 문단에 적용되는 스타일링 속성을 나타냅니다.\n...\n  else: warn(msg)\nC:\\Users\\freed\\.pyenv\\pyenv-win\\versions\\3.10.1\\lib\\site-packages\\fastcore\\docscrape.py:225: UserWarning: potentially wrong underline length... \n메서드 \n------ in \nParaShape 클래스는 문단 모양을 다룹니다. ParaShape는 문단에 적용되는 스타일링 속성을 나타냅니다.\n...\n  else: warn(msg)\nC:\\Users\\freed\\.pyenv\\pyenv-win\\versions\\3.10.1\\lib\\site-packages\\fastcore\\docscrape.py:225: UserWarning: Unknown section 속성\n  else: warn(msg)\n\nsource\n\n\nParaShape\n\n ParaShape (char_pset=None, **kwargs)\n\nParaShape 클래스는 문단 모양을 다룹니다. ParaShape는 문단에 적용되는 스타일링 속성을 나타냅니다.\n\nparashape = ParaShape()\nparashape\n\n&lt;ParaShape: left_margin=None, right_margin=None, indentation=None, prev_spacing=None, next_spacing=None, line_spacing_type=None, line_spacing=None, align_type=None, break_latin_word=None, break_non_latin_word=None, snap_to_grid=None, condense=None, widow_orphan=None, keep_with_next=None, page_break_before=None, text_alignment=None, font_line_height=None, heading_type=None, level=None, border_connect=None, border_text=None, border_offset_left=None, border_offset_right=None, border_offset_top=None, border_offset_bottom=None, tail_type=None, line_wrap=None&gt;\n\n\n\nsource\n\n\nPageShape\n\n PageShape (MarginLeft:int)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HwpApi",
    "section": "",
    "text": "여기서 Tutorials을 볼 수 있습니다."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "HwpApi",
    "section": "Install",
    "text": "Install\n이 패키지는 win32com을 통해 좀더 쉽게 한글 자동화를 하기 위한 패키지 입니다. 따라서, 한글 오피스가 설치된 Windows에서만 작동합니다. 리눅스나 한컴 오피스가 설치된 Mac OS에서는 작동하지 않습니다.\n다른 일반적인 패키지와 같이 아래 명령어를 입력하면 설치할 수 있습니다.\npip install hwpapi"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "HwpApi",
    "section": "How to use",
    "text": "How to use\n기본적으로는 wi32com을 통한 한컴 오피스 자동화를 보다 쉽게 사용하기 위해 개발한 패키지 입니다.\n기존의 연동성을 최대한 유지하면서도 파이써닉하게 코드를 짤 수 있도록 개선하고자 하였습니다.\n\n기존 코드와 연동성 비교하기\n회사원 코딩에 가보시면 아래와 같이 자동화 코드가 있습니다.\nimport win32com.client as win32\nhwp = win32.gencache.EnsureDispatch(\"HWPFrame.HwpObject\")\nhwp.XHwpWindows.Item(0).Visible = True\n\nact = hwp.CreateAction(\"InsertText\")\npset = act.CreateSet()\npset.SetItem(\"Text\", \"Hello\\r\\nWorld!\")\nact.Execute(pset)\n이 코드는 기본적으로 장황하다고 볼 만한 상황입니다. 이 코드를 HwpApi를 사용하면 아래와 같이 간결하게 정리가 됨을 볼 수 있습니다.\n\nfrom hwpapi.core import App\n\napp = App()\naction = app.actions.InsertText()\np = action.pset\np.Text = \"Hello\\r\\nWorld!\"\naction.run()\n\nTrue\n\n\n이렇게 자주 사용하는 기능은 함수로 만들었습니다.\n\napp.insert_text(\"Hello\\r\\nWorld!\")\n\n글자 모양을 바꾸는 것은 자주 있는 함수 입니다. win32com을 사용하면 아래와 같이 작성해야 합니다.\nAct = hwp.CreateAction(\"CharShape\")\nSet = Act.CreateSet()\nAct.GetDefault(Set) \nSet.Item(\"Italic\")\nSet.SetItem(\"Italic\", 1)\nAct.Execute(Set)\n이렇게 자주 사용되는 기능은 함수로 만들어 사용할 수 있게 했습니다.\n\napp.set_charshape(italic=True)\n\nTrue\n\n\n코드를 보시면 hwp를 세팅하는 부분이 간략해졌습니다. 또한 파라미터 설정이 파이썬 객체처럼 설정할 수 있게 변경 되어 있는 것을 볼 수 있습니다.\n이런 식으로 파이썬에서 사용하기 쉽게 만들었습니다."
  },
  {
    "objectID": "index.html#왜-hwpapi를-만들었나요",
    "href": "index.html#왜-hwpapi를-만들었나요",
    "title": "HwpApi",
    "section": "왜 HwpApi를 만들었나요?",
    "text": "왜 HwpApi를 만들었나요?\n가장 큰 이유는 스스로 사용하기 위해서 입니다. 직장인으로 많은 한글 문서를 편집하고 작성하곤 하는데 단순 반복업무가 너무 많다는 것이 불만이었습니다. 이런 문제를 해결하는 방법으로 한글 자동화에 대한 이야기를 파이콘에서 보게 되었습니다. 특히 ‘회사원 코딩’ 님의 블로그와 영상이 많은 참조가 되었습니다.\n다만 그 과정에서 설명자료가 부족하기도 하고 예전에 작성했던 코드들을 자꾸 찾아보게 되면서 아래아 한글 용 파이썬 패키지가 있으면 좋겠다는 생각을 했습니다. 특히 업무를 하면서 엑셀 자동화를 위해 xlwings를 사용해 보면서 파이썬으로 사용하기 쉽게 만든 라이브러리가 코딩 작업 효율을 엄청 올린다는 것을 깨닫게 되었습니다.\n제출 마감까지 해야 할 일들을 빠르게 하기 위해서 빠르게 한글 자동화가 된다면 좋겠다는 생각으로 만들게 되었습니다.\n기본적인 철학은 xlwings을 따라하고 있습니다. 기본적으로는 자주 쓰이는 항목들을 사용하기 쉽게 정리한 메소드 등으로 구현하고, 부족한 부분은 App.api형태로 win32com으로 하는 것과 동일한 작업이 가능하게 하여 한글 api의 모든 기능을 사용할 수 있도록 구현하였습니다.\n메소드로 만드는 것에는 아직 고민이 있습니다. chain과 같은 형태로 여러가지 콤비네이션을 사전에 세팅을 해야 하나 싶은 부분도 있고 실제로 유용하게 사용할 수 있는 여러가지 아이템 등도 있어서 어떤 부분까지 이 패키지에 구현할지는 고민하고 있습니다.\n다만 이런 형태의 작업을 통해서 어쩌면 hwp api wrapper가 활성화 되어서 단순 작업을 자동화 할 수 있기를 바라고 있습니다."
  }
]