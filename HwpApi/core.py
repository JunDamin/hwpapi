# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['mask_options', 'scan_spos_keys', 'scan_epos_keys', 'scan_directions', 'move_ids', 'dispatch', 'App']

# %% ../nbs/00_core.ipynb 6
import os
import shutil
from contextlib import contextmanager

def dispatch(app_name:str):
    try:
        from win32com import client
        app = client.gencache.EnsureDispatch(app_name)
    except AttributeError:
        # Corner case dependencies.
        import os
        import re
        import sys
        import shutil
        # Remove cache and try again.
        MODULE_LIST = [m.__name__ for m in sys.modules.values()]
        for module in MODULE_LIST:
            if re.match(r'win32com\.gen_py\..+', module):
                del sys.modules[module]
        shutil.rmtree(os.path.join(os.environ.get('LOCALAPPDATA'), 'Temp', 'gen_py'))
        from win32com import client
        app = client.gencache.EnsureDispatch(app_name)
    return app

# %% ../nbs/00_core.ipynb 8
from win32com import client as wc
from pathlib import Path
from fastcore.basics import patch

# %% ../nbs/00_core.ipynb 9
from .actions import _Actions, _Action
from .functions import get_absolute_path, check_dll, get_value

# %% ../nbs/00_core.ipynb 13
class App:
    ''' App 클래스는 한컴오피스의 한/글 프로그램과 상호작용하기 위한 인터페이스를 제공합니다.'''
    def __init__(self, api=None):
        ''' `__init__` 함수에서는 `api` 객체를 인자로 받습니다. 
        만약 `api`가 제공되지 않았을 경우, `wc.gencache.EnsureDispatch("HWPFrame.HwpObject")`를 호출하여 
        기본값으로 한/글 프로그램의 COM 객체를 생성합니다. 그리고 `self.api` 속성에 이 객체를 할당합니다. 
        `_Actions` 클래스의 객체를 생성하여 `self.actions` 속성에 할당하고, `self.set_visible()` 함수를 호출합니다.'''
        if not api:        
            api = dispatch("HWPFrame.HwpObject")
        self.api = api
        self.actions = _Actions(self)
        self.set_visible()
        check_dll()
        self.api.RegisterModule("FilePathCheckDLL", "FilePathCheckerModule")
                
    def __str__(self): return f"<Hwp App: {self.get_filepath()}>"
    __repr__ = __str__

# %% ../nbs/00_core.ipynb 14
@patch
def set_visible(app:App, is_visible=True, window_i=0):
    '''`set_visible()` 함수는 한/글 프로그램의 창을 화면에 보이거나 숨기기 위해 호출됩니다. 
    `is_visible` 인자가 `True`일 경우 창이 화면에 보이고, `False`일 경우 숨깁니다. 
    `window_i` 인자는 창의 인덱스를 지정합니다.'''

    app.api.XHwpWindows.Item(window_i).Visible = is_visible

# %% ../nbs/00_core.ipynb 15
@patch
def get_filepath(app:App):
    '''`get_filepath()` 함수는 현재 열려있는 한/글 문서의 경로를 반환합니다.'''
    doc = app.api.XHwpDocuments.Active_XHwpDocument
    return doc.FullName

# %% ../nbs/00_core.ipynb 17
@patch
def open(app:App, path:str):
    '''`open()` 함수는 파일 경로를 인자로 받아 해당 파일을 한/글 프로그램에서 엽니다. 
    `get_absolute_path()` 함수를 호출하여 절대 경로로 변환한 후, `api.Open()` 함수를 호출하여 파일을 엽니다. 
    열린 파일의 경로를 반환합니다.'''
    name = get_absolute_path(path)
    app.api.Open(name)
    return name

# %% ../nbs/00_core.ipynb 19
@patch
def save(app:App, path=None):
    '''`save()` 함수는 현재 열려있는 문서를 저장하거나 다른 이름으로 저장합니다. 
    `path` 인자가 주어지지 않은 경우 현재 문서를 덮어쓰기로 저장하고, 저장된 파일의 경로를 반환합니다. 
    `path` 인자가 주어진 경우, `Path` 모듈을 이용하여 파일 확장자를 추출한 후, 해당 확장자에 맞게 문서를 저장합니다. 
    저장된 파일의 경로를 반환합니다.'''

    if not path:
        app.api.Save()
        return app.get_filepath()
    name = get_absolute_path(path)
    extension = Path(name).suffix
    format_ = {".hwp": "HWP", ".pdf": "PDF", ".hwpx": "HWPML2X"}.get(extension)

    app.api.SaveAs(name, format_)
    return name

# %% ../nbs/00_core.ipynb 20
@patch
def close(app:App):
    '''`close()` 함수는 현재 열려있는 문서를 닫습니다.'''
    app.api.Run("FileClose")

# %% ../nbs/00_core.ipynb 21
@patch
def quit(app:App):
    '''`quit()` 함수는 한/글 프로그램을 종료합니다.'''
    app.api.Run("FileQuit")

# %% ../nbs/00_core.ipynb 22
@patch        
def create_action(app:App, action_key:str):
    '''`create_action()` 함수는 `_Action` 클래스의 객체를 생성하여 반환합니다.'''
    return _Action(app, action_key)

# %% ../nbs/00_core.ipynb 23
@patch    
def create_parameterset(app:App, action_key:str):
    '''`create_parameterset()` 함수는 특정 액션의 파라미터셋을 반환합니다.
    `_action_info` 딕셔너리에서 액션에 대한 정보를 찾아서 파라미터셋의 키 값을 가져옵니다. 파라미터셋 객체를 반환합니다.'''
    pset_key, description = _action_info.get(action_key, None)
    if not pset_key:
        return None
    return getattr(app.api.HParameterSet, f"H{pset_key}")


# %% ../nbs/00_core.ipynb 24
@patch
def insert_text(app:App, text:str):
    '''`text를 입력합니다.'''
    action = app.actions.InsertText()
    p = action.pset
    p.Text = text
    return action.run()

# %% ../nbs/00_core.ipynb 26
@patch
def find_files(app:App):
    '''`text를 입력합니다.'''
    action = app.actions.InsertText
    p = action.pset
    p.Text = text
    return action.run()

# %% ../nbs/00_core.ipynb 27
mask_options = {
    "Normal": 0x00,         # "본문을 대상으로 검색한다.(서브리스트를 검색하지 않는다.)"
    "Char": 0x01,           # "char 타입 컨트롤 마스크를 대상으로 한다.(강제줄나눔, 문단 끝, 하이픈, 묶움빈칸, 고정폭빈칸, 등...)"
    "Inline": 0x02,         # "inline 타입 컨트롤 마스크를 대상으로 한다.(누름틀 필드 끝, 등...)"
    "Ctrl": 0x04,           # "extende 타입 컨트롤 마스크를 대상으로 한다.(바탕쪽, 프레젠테이션, 다단, 누름틀 필드 시작, Shape Object, 머리말, 꼬리말, 각주, 미주, 번호관련 컨트롤, 새 번호 관련 컨트롤, 감추기, 찾아보기, 글자 겹침, 등...)"
    "All": None
}

scan_spos_keys = {
    "Current": 0x0000,      # "캐럿 위치부터. (시작 위치)",
    "Specified": 0x0010,    # "특정 위치부터. (시작 위치)",
    "Line": 0x0020,         # "줄의 시작부터. (시작 위치)",
    "Paragraph": 0x0030,    # "문단의 시작부터. (시작 위치)"
    "Section": 0x0040,      # "구역의 시작부터. (시작 위치)"
    "List": 0x0050,         # "리스트의 시작부터. (시작 위치)"
    "Control": 0x0060,      # "컨트롤의 시작부터. (시작 위치)"
    "Document": 0x0070,     # "문서의 시작부터. (시작 위치)"
}

scan_epos_keys = {
    "Current": 0x0000,      # "캐럿 위치까지. (끝 위치)"
    "Specified": 0x0001,    # "특정 위치까지. (끝 위치)"
    "Line": 0x0002,         # "줄의 끝까지. (끝 위치)"
    "Paragraph": 0x0003,    # "문단의 끝까지. (끝 위치)"
    "Section": 0x0004,      # "구역의 끝까지. (끝 위치)"
    "List": 0x0005,         # "리스트의 끝까지. (끝 위치)"
    "Control": 0x0006,      # "컨트롤의 끝까지. (끝 위치)"
    "Document": 0x0007,     # "문서의 끝까지. (끝 위치)"
}

scan_directions = {
    "Forward": 0x0000, # "정뱡향. (검색 방향)"
    "Backward": 0x0100  # "역방향. (검색 방향)"
}


def _get_text(app):
    flag, text = 2, ""
    while flag not in [0, 1, 101, 102]:
        flag, text = app.api.GetText()
        yield text

@patch
@contextmanager
def scan(app:App, option="All", selection=False, scan_spos="Document", scan_epos="Document", spara=None, spos=None, epara=None, epos=None, scan_direction="Forward"):
    
    # set start and end position
    spos_id = get_value(scan_spos_keys, scan_spos)
    epos_id = get_value(scan_epos_keys, scan_epos)
    range_ = spos_id + epos_id
    # if selection
    if selection:
        range_ = 0x00ff    # "검색의 범위를 블록으로 제한."
    
    # set direction
    direction = get_value(scan_directions, scan_direction)
    range_ = range_ + direction
    app.api.InitScan(option=get_value(mask_options, option), Range=range_, spara=spara, spos=spos, epara=epara, epos=epos)
    yield _get_text(app)   
    app.api.ReleaseScan()

# %% ../nbs/00_core.ipynb 28
move_ids = {
    "Main": 0,    # 루트 리스트의 특정 위치.(para pos로 위치 지정)
    "CurList": 1,    # 현재 리스트의 특정 위치.(para pos로 위치 지정)
    "TopOfFile": 2,   #문서의 시작으로 이동.
    "BottomOfFile": 3,   # 문서의 끝으로 이동.
    "TopOfList": 4,    # 현재 리스트의 시작으로 이동
    "BottomOfList": 5,   # 현재 리스트의 끝으로 이동
    "StartOfPara": 6,   # 현재 위치한 문단의 시작으로 이동
    "EndOfPara": 7,  # 현재 위치한 문단의 끝으로 이동
    "StartOfWord": 8,  # 현재 위치한 단어의 시작으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "EndOfWord": 9,  # 현재 위치한 단어의 끝으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "NextPara": 10, # 다음 문단의 시작으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "PrevPara": 11, # 앞 문단의 끝으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "NextPos": 12, # 한 글자 뒤로 이동.(서브 리스트를 옮겨 다닐 수 있다.)
    "PrevPos": 13, # 한 글자 앞으로 이동.(서브 리스트를 옮겨 다닐 수 있다.)
    "NextPosEx": 14,  # 한 글자 뒤로 이동.(서브 리스트를 옮겨 다닐 수 있다. 머리말/꼬리말, 각주/미주, 글상자 포함.)
    "PrevPosEx": 15,   # 한 글자 앞으로 이동.(서브 리스트를 옮겨 다닐 수 있다. 머리말/꼬리말, 각주/미주, 글상자 포함.)
    "NextChar": 16,  # 한 글자 뒤로 이동.(현재 리스트만을 대상으로 동작한다.)
    "PrevChar": 17,  # 한 글자 앞으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "NextWord": 18, # 한 단어 뒤로 이동.(현재 리스트만을 대상으로 동작한다.)
    "PrevWord": 19, # 한 단어 앞으로 이동.(현재 리스트만을 대상으로 동작한다.)
    "NextLine": 20, # 한 줄 아래로 이동.
    "PrevLine": 21, # 한 줄 위로 이동.
    "StartOfLine": 22, # 현재 위치한 줄의 시작으로 이동.
    "EndOfLine": 23,  # 현재 위치한 줄의 끝으로 이동.
    "ParentList": 24, # 한 레벨 상위로 이동한다.
    "TopLevelList": 25, # 탑레벨 리스트로 이동한다.
    "RootList": 26, # 루트 리스트로 이동한다. 현재 루트 리스트에 위치해 있어 더 이상 상위 리스트가 없을 때는 위치 이동 없이 반환한다. 이동한 후의 위치는 상위 리스트에서 서브리스트가 속한 컨트롤 코드가 위치한 곳이다. 위치 이동시 셀렉션은 무조건 풀린다.
    "CurrentCaret": 27, # 현재 캐럿이 위치한 곳으로 이동한다. (캐럿 위치가 뷰의 맨 위쪽으로 올라간다. )
    "LeftOfCell": 100,  # 현재 캐럿이 위치한 셀의 왼쪽
    "RightOfCell": 101,  # 현재 캐럿이 위치한 셀의 오른쪽
    "UpOfCell": 102,  # 현재 캐럿이 위치한 셀의 위쪽
    "DownOfCell": 103,  # 현재 캐럿이 위치한 셀의 아래쪽
    "StartOfCell": 104, # 현재 캐럿이 위치한 셀에서 행(row)의 시작
    "EndOfCell": 105, # 현재 캐럿이 위치한 셀에서 행(row)의 끝
    "TopOfCell": 106, # 현재 캐럿이 위치한 셀에서 열(column)의 시작
    "BottomOfCell": 107, #현재 캐럿이 위치한 셀에서 열(column)의 끝
    "ScrPos": 200, # 한/글 문서장에서의 screen 좌표로서 위치를 설정 한다.
    "ScanPos": 201, # GetText() 실행 후 위치로 이동한다.
}

@patch
def move(app:App, move_key="ScanPos", para=None, pos=None):
    """키워드를 바탕으로 캐럿 위치를 이동시킵니다."""
    
    move_id = get_value(move_ids, move_key)
    return app.api.MovePos(moveID=move_id, Para=para, pos=pos)
    
