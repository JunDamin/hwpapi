# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_api/00_core.ipynb.

# %% auto 0
__all__ = ['engines', 'Engine', 'Engines', 'Apps', 'App', 'MaskOption', 'ScanStartPosition', 'ScanEndPosition', 'ScanDirection',
           'move_to_line', 'MoveId', 'SizeOption', 'Effect', 'SelectionOption', 'Direction', 'Thickness']

# %% ../nbs/02_api/00_core.ipynb 4
from contextlib import contextmanager
from pathlib import Path
import numbers
from enum import Enum, auto

from fastcore.basics import patch

# %% ../nbs/02_api/00_core.ipynb 5
from .actions import _Action, _Actions
from .dataclasses import CharShape, ParaShape
from hwpapi.functions import (
    check_dll,
    get_hwp_objects,
    dispatch,
    get_absolute_path,
    get_charshape_pset,
    get_parashape_pset,
    get_rgb_tuple,
    get_value,
    mili2unit,
    point2unit,
    set_charshape_pset,
    set_parashape_pset,
    set_pset,
    unit2mili,
    unit2point,
)

# %% ../nbs/02_api/00_core.ipynb 6
class Engine:
    """
    Engine class to encapsulate the Hancom Office Hwp object.

    This class provides an interface to interact with the Hancom Office Hwp application,
    allowing for actions and operations within the Hwp environment.
    """

    def __init__(self, hwp_object=None):
        """
        Initializes the Engine with a Hancom Hwp object.

        Parameters
        ----------
        hwp_object : object, optional
            The Hwp object to be encapsulated by the Engine. If not provided, it defaults to creating a new Hwp object.
        """
        try:
            if not hwp_object:
                hwp_object = "HWPFrame.HwpObject"
            impl = dispatch(hwp_object)
            self.impl = impl
        except Exception as e:
            # Handle specific exceptions as needed
            print(f"Failed to initialize Hwp object: {e}")
            self.impl = None

    @property
    def name(self):
        """
        Returns the name (CLSID) of the Hwp object.

        Returns
        -------
        str
            The CLSID of the Hwp object.
        """
        return self.impl.CLSID if self.impl else None

    def __repr__(self):
        """
        Returns the string representation of the Engine object.

        Returns
        -------
        str
            String representation of the Engine.
        """
        engine_name = self.name if self.name else "Uninitialized"
        return f"<Engine {engine_name}>"


# %% ../nbs/02_api/00_core.ipynb 7
class Engines:
    def __init__(self, dll_path=None):
        self.active = None
        self.engines = [Engine(hwp_object) for hwp_object in get_hwp_objects()]
        check_dll(dll_path)

    def add(self, engine):
        self.engines.append(engine)

    @property
    def count(self):
        return len(self)

    def __call__(self, ind):
        if isinstance(ind, numbers.Number):
            return self.engines[ind]
                

    def __getitem__(self, ind):
        if isinstance(ind, numbers.Number):
            return self.engines[ind]
        

    def __len__(self):
        return len(self.engines)

    def __iter__(self):
        for engine in self.engines:
            yield engine

    def __repr__(self):
        return f"<HWP Engines activated: {len(self.engines)}>"

# %% ../nbs/02_api/00_core.ipynb 8
class Apps:
    """
    A collection of all `app <App>` objects.

    Attributes
    ----------
    _apps : list
        A list containing instances of `App`.

    Methods
    -------
    add(**kwargs)
        Creates a new App and adds it to the collection.
    count()
        Returns the number of apps in the collection.
    cleanup()
        [Method description needed]
    """

    def __init__(self):
        """
        Initializes the `Apps` collection by creating `App` instances for each `engine` in `Engines`.
        """
        self._apps = [App(engine=engine) for engine in Engines()]

    def add(self, **kwargs):
        """
        Creates a new App. The new App becomes the active one.

        Returns
        -------
        App
            The newly created App object.
        """
        app = App(engine=Engine())
        self._apps.append(app)
        return app  

    def __call__(self, i):
        """
        Allows the `Apps` instance to be called like a function, returning the app at the specified index.

        Parameters
        ----------
        i : int
            The index of the app to retrieve.

        Returns
        -------
        App
            The app at the specified index.
        """
        return self[i]

    def __repr__(self):
        """
        Returns a string representation of the `Apps` instance.

        Returns
        -------
        str
            A string representation of the `Apps` instance.
        """
        return "{}({})".format(
            getattr(self.__class__, "_name", self.__class__.__name__), repr(list(self))
        )

    def __getitem__(self, item):
        """
        Returns the app at the specified index.

        Parameters
        ----------
        item : int
            The index of the app.

        Returns
        -------
        App
            The app at the specified index.
        """
        return self._apps[item]

    def __len__(self):
        """
        Returns the number of apps in the collection.

        Returns
        -------
        int
            The number of apps.
        """
        return len(self._apps)

    @property
    def count(self):
        """
        Returns the number of apps in the collection.

        .. versionadded:: 0.9.0

        Returns
        -------
        int
            The number of apps.
        """
        return len(self)

    def cleanup(self):
        """
        [Method description needed]

        [Describe what the method does and any side effects]
        """
        

    def __iter__(self):
        """
        Allows iteration over the collection of apps.

        Yields
        ------
        App
            The next app in the collection.
        """
        for app in self._apps:
            yield app


# %% ../nbs/02_api/00_core.ipynb 9
engines = Engines()

# %% ../nbs/02_api/00_core.ipynb 10
class App:
    """
    `App` 클래스는 한컴오피스의 한/글 프로그램과 상호작용하기 위한 인터페이스를 제공합니다.

    이 클래스는 한/글 프로그램의 COM 객체와의 연동을 관리하고, 해당 객체에 대한 작업을 수행하는 메서드들을 포함합니다.

    Attributes
    ----------
    engine : Engine, optional
        사용할 엔진 객체입니다.
    is_visible : bool, optional
        한/글 프로그램의 가시성을 설정합니다.
    dll_path : str, optional
        사용할 DLL 파일의 경로입니다.

    Methods
    -------
    __init__(engine=None, is_visible=True, dll_path=None)
        `App` 클래스의 인스턴스를 초기화합니다.
    api()
        현재 사용 중인 엔진의 구현체를 반환합니다.
    __str__()
        `App` 인스턴스의 문자열 표현을 반환합니다.
    """

    def __init__(self, engine=None, is_visible=True, dll_path=None):
        """
        `App` 클래스의 인스턴스를 초기화합니다.

        Parameters
        ----------
        engine : Engine, optional
            한/글 프로그램과의 상호작용을 위한 엔진. 기본값이 없을 경우, 새로운 엔진 인스턴스가 생성됩니다.
        is_visible : bool, optional
            한/글 프로그램의 가시성 설정. 기본값은 True입니다.
        dll_path : str, optional
            사용할 DLL 파일의 경로. 기본값은 None입니다.

        Notes
        -----
        engine이 제공되지 않은 경우, `Engines`를 통해 엔진을 생성하거나 선택합니다.
        """
        if not engine:
            engines = Engines()
            engine = engines[-1] if len(engines) > 0 else Engine()
        self.engine = engine
        check_dll(dll_path)
        self.api.RegisterModule("FilePathCheckDLL", "FilePathCheckerModule")
        self.actions = _Actions(self)
        self.parameters = self.api.HParameterSet
        self.set_visible(is_visible)

    @property
    def api(self):
        """
        현재 사용 중인 엔진의 구현체를 반환합니다.

        Returns
        -------
        object
            엔진의 구현체.
        """
        return self.engine.impl
    
    def __str__(self):
        """
        `App` 인스턴스의 문자열 표현을 반환합니다.

        Returns
        -------
        str
            `App` 인스턴스를 설명하는 문자열.
        """
        return f"<Hwp App: {self.get_filepath()}>"

    __repr__ = __str__


# %% ../nbs/02_api/00_core.ipynb 11
@patch
def reload(app: App, dll_path=None):
    """
    Reloads the `App` instance with a new HWPFrame.HwpObject and resets its visibility and DLL path.

    This function is designed to reinitialize the `app` object's API with a new instance of the HWPFrame.HwpObject.
    It also checks and registers the specified DLL file if provided.

    Parameters
    ----------
    app : App
        The `App` instance to be reloaded.
    dll_path : str, optional
        The path to the DLL file to be checked and registered. If None, no DLL registration is performed.

    Notes
    -----
    The `reload` function is useful in scenarios where the state of the HWPFrame.HwpObject needs to be reset
    or when changing the DLL being used.

    Examples
    --------
    >>> app = App()
    >>> reload(app, dll_path="path/to/dll")
    """
    app.api = dispatch("HWPFrame.HwpObject")
    app.set_visible()
    check_dll(dll_path)
    app.api.RegisterModule("FilePathCheckDLL", "FilePathCheckerModule")


# %% ../nbs/02_api/00_core.ipynb 12
@patch
def set_visible(app: App, is_visible=True, window_i=0):
    """
    Sets the visibility of the Hancom Office Hwp program window.

    This function is used to show or hide the window of the Hancom Office Hwp program based on the `is_visible` parameter.
    The `window_i` parameter specifies the index of the window to be shown or hidden.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    is_visible : bool, optional
        A boolean value indicating the visibility of the program window. 
        If True, the window is made visible. If False, it is hidden. Default is True.
    window_i : int, optional
        The index of the window to be modified. Default is 0.

    Examples
    --------
    >>> app = App()
    >>> set_visible(app, is_visible=True, window_i=0)
    >>> set_visible(app, is_visible=False, window_i=1)
    """
    app.api.XHwpWindows.Item(window_i).Visible = is_visible


# %% ../nbs/02_api/00_core.ipynb 13
@patch
def get_filepath(app: App):
    """
    Retrieves the file path of the currently open Hancom Office Hwp document.

    This function accesses the active document in the Hancom Office Hwp program linked to the `App` instance
    and returns its full file path.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.

    Returns
    -------
    str
        The full file path of the currently active Hancom Office Hwp document.

    Examples
    --------
    >>> app = App()
    >>> filepath = get_filepath(app)
    >>> print(filepath)
    """
    doc = app.api.XHwpDocuments.Active_XHwpDocument
    return doc.FullName


# %% ../nbs/02_api/00_core.ipynb 14
@patch
def create_action(app: App, action_key: str):
    """
    Creates and returns an instance of the `_Action` class.

    This function generates a new `_Action` instance associated with the given `app` and `action_key`. 
    The `action_key` specifies the type of action to be created for the application.

    Parameters
    ----------
    app : App
        The application object for which the action is being created.
    action_key : str
        The key representing the specific action to be created.

    Returns
    -------
    _Action
        An instance of the `_Action` class initialized with the provided application object and action key.

    Examples
    --------
    >>> app = App()
    >>> action = create_action(app, 'some_action_key')
    >>> print(action)
    """
    return _Action(app, action_key)


# %% ../nbs/02_api/00_core.ipynb 15
@patch
def create_parameterset(app: App, action_key: str):
    """
    Creates and returns a parameter set for a specific action within the application.

    This function utilizes the `_action_info` dictionary to look up the parameter set information for the given action key.
    If the parameter set information exists for the specified action key, it creates and returns the corresponding parameter set object.

    Parameters
    ----------
    app : App
        The application object for which the parameter set is being created.
    action_key : str
        The key of the action for which the parameter set is being created.

    Returns
    -------
    HParameterSet object or None
        The parameter set object for the specified action key. 
        If there is no parameter set information for the given action key, None is returned.

    Examples
    --------
    >>> app = App()
    >>> params = create_parameterset(app, 'some_action_key')
    >>> print(params)
    """
    pset_key, description = _action_info.get(action_key, (None, None))
    if not pset_key:
        return None
    return getattr(app.api.HParameterSet, f"H{pset_key}")


# %% ../nbs/02_api/00_core.ipynb 17
@patch
def open(app: App, path: str):
    """
    Opens a file in the Hancom Office Hwp program using the provided file path.

    This function first converts the provided file path to an absolute path using the `get_absolute_path` function.
    It then opens the file in the Hancom Office Hwp program using the `api.Open` method and returns the absolute path of the opened file.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    path : str
        The file path of the document to be opened.

    Returns
    -------
    str
        The absolute path of the file that has been opened.

    Examples
    --------
    >>> app = App()
    >>> opened_file_path = open(app, 'path/to/document.hwp')
    >>> print(opened_file_path)
    """
    name = get_absolute_path(path)
    app.api.Open(name)
    return name


# %% ../nbs/02_api/00_core.ipynb 19
@patch
def get_hwnd(app: App):
    """
    Retrieves the window handle (HWND) of the active window in the Hancom Office Hwp program.

    This function accesses the active window in the Hancom Office Hwp program linked to the `App` instance
    and returns its window handle. The window handle can be used in scenarios where direct manipulation
    or interaction with the window at the OS level is required.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.

    Returns
    -------
    int
        The window handle (HWND) of the active Hancom Office Hwp window.

    Examples
    --------
    >>> app = App()
    >>> hwnd = get_hwnd(app)
    >>> print(hwnd)
    """
    return app.api.XHwpWindows.Active_XHwpWindow.WindowHandle


# %% ../nbs/02_api/00_core.ipynb 21
@patch
def save(app: App, path=None):
    """
    Saves the current document in the Hancom Office Hwp program.

    If a path is provided, the document is saved to that location in the appropriate format based on the file extension.
    Supported formats include HWP, PDF, HWPML2X (HWPX), and PNG. If no path is provided, the document is saved
    in its current location.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    path : str, optional
        The file path where the document will be saved. If None, the document is saved in its current location.

    Returns
    -------
    str
        The file path where the document has been saved.

    Examples
    --------
    >>> app = App()
    >>> saved_file_path = save(app, 'path/to/document.hwp')
    >>> print(saved_file_path)
    """
    if not path:
        app.api.Save()
        return app.get_filepath()
    
    name = get_absolute_path(path)
    extension = Path(name).suffix
    format_ = {
        ".hwp": "HWP",
        ".pdf": "PDF",
        ".hwpx": "HWPML2X",
        ".png": "PNG",
    }.get(extension)

    app.api.SaveAs(name, format_)
    return name


# %% ../nbs/02_api/00_core.ipynb 23
@patch
def save_block(app: App, path: Path):
    """
    Saves a block of content in the Hancom Office Hwp program and returns the file path.

    This function saves a specified block from the Hancom Office Hwp program to a file in a given format.
    The format is determined by the file extension. Supported formats include HWP, PDF, HWPML2X (HWPX), and PNG.
    It returns the file path if the save operation is successful or None if it fails.

    Parameters
    ----------
    app : App
        The application object where the action will be performed.
    path : Path
        The file path where the block will be saved.

    Returns
    -------
    Path or None
        The path to the saved file if the save operation is successful, or None if it fails.

    Examples
    --------
    >>> app = App()
    >>> saved_path = save_block(app, Path('path/to/save/block.hwp'))
    >>> print(saved_path)
    """

    name = get_absolute_path(path)
    extension = Path(name).suffix
    format_ = {
        ".hwp": "HWP",
        ".pdf": "PDF",
        ".hwpx": "HWPML2X",
        ".png": "PNG",
    }.get(extension)

    action = app.actions.SaveBlockAction()
    p = action.pset
    
    p.filename = name
    p.Format = format_
    action.run()
    return name if Path(name).exists() else None


# %% ../nbs/02_api/00_core.ipynb 25
@patch
def close(app: App):
    """
    Closes the currently open document in the Hancom Office Hwp program.

    This function triggers the 'FileClose' command within the Hancom Office Hwp program to close the current document.
    It's useful for programmatically managing documents within the application.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.

    Examples
    --------
    >>> app = App()
    >>> # Open and manipulate the document
    >>> close(app)
    """
    app.api.Run("FileClose")


# %% ../nbs/02_api/00_core.ipynb 27
@patch
def quit(app: App):
    """
    Terminates the Hancom Office Hwp program instance associated with the `App`.

    This function invokes the 'FileQuit' command within the Hancom Office Hwp program to close the application. 
    It's useful for programmatically controlling the lifecycle of the application.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.

    Examples
    --------
    >>> app = App()
    >>> # Perform actions with the app
    >>> quit(app)
    """
    app.api.Run("FileQuit")


# %% ../nbs/02_api/00_core.ipynb 28
@patch
def get_charshape(app: App):
    """
    Retrieves the character shape settings from the current application.

    This method accesses the character shape settings in the Hancom Office Hwp program linked to the `App` instance.
    It extracts these settings and encapsulates them in a `CharShape` object for further use or analysis.

    Parameters
    ----------
    app : App
        The application object from which the character shape settings will be retrieved.

    Returns
    -------
    CharShape
        An object representing the character shape settings of the application.

    Examples
    --------
    >>> app = App()
    >>> char_shape = get_charshape(app)
    >>> print(char_shape)
    """
    action = app.actions.CharShape()
    p = action.pset
    return CharShape(p)


# %% ../nbs/02_api/00_core.ipynb 30
@patch
def set_charshape(app: App, charshape: CharShape=None, **kwargs):
    """
    Sets the character shape in the current paragraph of the Hancom Office Hwp application using the provided `CharShape`.

    If `charshape` is None, a default instance of `CharShape` is created. The function can also accept additional keyword 
    arguments (`kwargs`), which are assigned as properties of `charshape`. This modified `charshape` is then used to change 
    the current paragraph shape in the Hancom Office Hwp document.

    Parameters
    ----------
    app : App
        The `App` object. It is used to access the Hancom Office Hwp application.
    charshape : CharShape, optional
        The `CharShape` object to be used for setting character shapes in Hancom Office Hwp. The default is None.
    **kwargs
        Additional keyword arguments that are assigned as properties of `charshape`.

    Returns
    -------
    bool
        A boolean value indicating the success of the `set_charshape` operation.

    Examples
    --------
    >>> app = App()
    >>> char_shape = CharShape()
    >>> success = set_charshape(app, charshape=char_shape, fontName='Arial', fontSize=10)
    >>> print(success)
    """
    if charshape is None:
        charshape = CharShape()

    for key, value in kwargs.items():
        setattr(charshape, key, value)
        
    action = app.actions.CharShape()
    set_pset(action.pset, charshape.todict())
    return action.run()


# %% ../nbs/02_api/00_core.ipynb 34
@patch
def get_parashape(app: App):
    """
    Retrieves the paragraph shape settings from the current application.

    This method accesses the paragraph shape settings in the Hancom Office Hwp program linked to the `App` instance.
    It extracts these settings and encapsulates them in a `ParaShape` object for further use or analysis.

    Parameters
    ----------
    app : App
        The application object from which the paragraph shape settings will be retrieved.

    Returns
    -------
    ParaShape
        An object representing the paragraph shape settings of the application.

    Examples
    --------
    >>> app = App()
    >>> para_shape = get_parashape(app)
    >>> print(para_shape)
    """
    action = app.actions.ParagraphShape()
    p = action.pset

    return ParaShape(p)


# %% ../nbs/02_api/00_core.ipynb 36
@patch
def set_parashape(app: App, parashape: ParaShape = None, **kwargs):
    """
    Sets the paragraph shape in the Hancom Office Hwp application using the provided `ParaShape`.

    If `parashape` is None, a default instance of `ParaShape` is created. The function can also accept additional keyword 
    arguments (`kwargs`), which are assigned as properties of `parashape`. This modified `parashape` is then used to change 
    the current paragraph shape in the Hancom Office Hwp document.

    Parameters
    ----------
    app : App
        The `App` object, used to access the Hancom Office Hwp application.
    parashape : ParaShape, optional
        The `ParaShape` object to be used for setting paragraph shapes in Hancom Office Hwp. Defaults to `None`.
    **kwargs
        Additional keyword arguments assigned as properties of `parashape`.

    Returns
    -------
    bool
        A boolean value indicating the success of the `set_parashape` operation.

    Examples
    --------
    >>> app = App()
    >>> para_shape = ParaShape()
    >>> success = set_parashape(app, parashape=para_shape, align='Left', indent=10)
    >>> print(success)
    """
    if parashape is None:
        parashape = ParaShape()

    for key, value in kwargs.items():
        setattr(parashape, key, value)

    action = app.actions.ParagraphShape()
    set_pset(action.pset, parashape.todict())
    return action.run()


# %% ../nbs/02_api/00_core.ipynb 38
@patch
def insert_text(
    app: App,
    text: str,
    charshape: CharShape = None, 
    **kwargs,
):
    """
    Inserts text into the Hancom Office Hwp document with specified character shape settings.

    This function inserts the given text into the document associated with the `App` instance. 
    It allows for optional character shape settings through a `CharShape` object. 
    Additional character shape attributes can be specified via keyword arguments.

    Parameters
    ----------
    app : App
        The `App` object associated with the Hancom Office Hwp program.
    text : str
        The text to be inserted into the document.
    charshape : CharShape, optional
        An optional `CharShape` object to specify the character shape settings for the inserted text. Defaults to `None`.
    **kwargs
        Additional character shape attributes to be set on the `charshape` object.

    Examples
    --------
    >>> app = App()
    >>> insert_text(app, "Hello World", fontName="Arial", fontSize=12)
    """
    if not charshape:
        charshape = CharShape()
    for key, value in kwargs.items():
        setattr(charshape, key, value)
    app.set_charshape(charshape)
    
    insert_text = app.actions.InsertText()
    p = insert_text.pset
    p.Text = text
    
    insert_text.run()
    return


# %% ../nbs/02_api/00_core.ipynb 43
class MaskOption(Enum):
    Normal = 0x00
    Char = 0x01
    Inline = 0x02
    Ctrl = 0x04
    All = auto()

class ScanStartPosition(Enum):
    Current = 0x0000
    Specified = 0x0010
    Line = 0x0020
    Paragraph = 0x0030
    Section = 0x0040
    List = 0x0050
    Control = 0x0060
    Document = 0x0070

class ScanEndPosition(Enum):
    Current = 0x0000
    Specified = 0x0001
    Line = 0x0002
    Paragraph = 0x0003
    Section = 0x0004
    List = 0x0005
    Control = 0x0006
    Document = 0x0007

class ScanDirection(Enum):
    Forward = 0x0000
    Backward = 0x0100

def _get_text(app):
    """스캔한 텍스트 텍스트 제너레이터"""
    flag, text = 2, ""
    while flag not in [0, 1, 101, 102]:
        flag, text = app.api.GetText()
        yield text

@patch
@contextmanager
def scan(
    app: App,
    option=MaskOption.All,
    selection=False,
    scan_spos=ScanStartPosition.Document,
    scan_epos=ScanEndPosition.Document,
    spara=None,
    spos=None,
    epara=None,
    epos=None,
    scan_direction=ScanDirection.Forward,
):
    range_ = scan_spos.value + scan_epos.value
    if selection:
        range_ = 0x00FF  # Limit the scanning to the block if selection is True

    range_ += scan_direction.value
    app.api.InitScan(
        option=option.value,
        Range=range_,
        spara=spara,
        spos=spos,
        epara=epara,
        epos=epos,
    )
    yield _get_text(app)
    app.api.ReleaseScan()


# %% ../nbs/02_api/00_core.ipynb 44
def move_to_line(app: App, text):
    """인자로 전달한 텍스트가 있는 줄의 시작지점으로 이동합니다."""
    with app.scan(scan_spos="Line") as scan:
        for line in scan:
            if text in line:
                return app.move(key=MoveID.ScanPos)
    return False

# %% ../nbs/02_api/00_core.ipynb 45
class MoveId(Enum):
    Main = 0
    CurList = 1
    TopOfFile = 2
    BottomOfFile = 3
    TopOfList = 4
    BottomOfList = 5
    StartOfPara = 6
    EndOfPara = 7
    StartOfWord = 8
    EndOfWord = 9
    NextPara = 10
    PrevPara = 11
    NextPos = 12
    PrevPos = 13
    NextPosEx = 14
    PrevPosEx = 15
    NextChar = 16
    PrevChar = 17
    NextWord = 18
    PrevWord = 19
    NextLine = 20
    PrevLine = 21
    StartOfLine = 22
    EndOfLine = 23
    ParentList = 24
    TopLevelList = 25
    RootList = 26
    CurrentCaret = 27
    LeftOfCell = 100
    RightOfCell = 101
    UpOfCell = 102
    DownOfCell = 103
    StartOfCell = 104
    EndOfCell = 105
    TopOfCell = 106
    BottomOfCell = 107
    ScrPos = 200
    ScanPos = 201

@patch
def move(app: App, key=MoveId.ScanPos, para=None, pos=None):
    """
    Moves the caret position based on the specified key.

    Parameters
    ----------
    app : App
        The `App` object associated with the Hancom Office Hwp program.
    key : MoveId, optional
        The movement option, as defined in the `MoveId` Enum. Defaults to MoveId.ScanPos.
    para : int, optional
        The paragraph number to move to, if applicable. Defaults to None.
    pos : int, optional
        The position within the paragraph to move to, if applicable. Defaults to None.
    
    Returns
    -------
    bool
        True if the movement was successful, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> move(app, key=MoveId.TopOfFile)
    """

    move_id = key.value if isinstance(key, MoveId) else MoveId[key].value
    return app.api.MovePos(moveID=move_id, Para=para, pos=pos)


# %% ../nbs/02_api/00_core.ipynb 46
@patch
def setup_page(
    app: App,  # app
    top=20,  # Top margin in millimeters
    bottom=10,  # Bottom margin in millimeters
    right=20,  # Right margin in millimeters
    left=20,  # Left margin in millimeters
    header=15,  # Header length in millimeters
    footer=5,  # Footer length in millimeters
    gutter=0,  # Gutter length (binding margin) in millimeters
):  
    """
    Sets up the page layout for the document in the Hancom Office Hwp application.

    This function configures the page margins, header, footer, and gutter (binding margin) sizes. 
    Measurements are in millimeters and are converted to the application's internal unit system.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    top : int, optional
        The top margin size in millimeters. Default is 20mm.
    bottom : int, optional
        The bottom margin size in millimeters. Default is 10mm.
    right : int, optional
        The right margin size in millimeters. Default is 20mm.
    left : int, optional
        The left margin size in millimeters. Default is 20mm.
    header : int, optional
        The header length in millimeters. Default is 15mm.
    footer : int, optional
        The footer length in millimeters. Default is 5mm.
    gutter : int, optional
        The gutter (binding margin) length in millimeters. Default is 0mm.

    Returns
    -------
    bool
        True if the page setup was successful, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> setup_page(app, top=25, bottom=15, right=20, left=20, header=10, footer=5, gutter=5)
    """

    action = app.actions.PageSetup()
    p = action.pset

    p.PageDef.TopMargin = app.api.MiliToHwpUnit(top)
    p.PageDef.HeaderLen = app.api.MiliToHwpUnit(header)
    p.PageDef.RightMargin = app.api.MiliToHwpUnit(right)
    p.PageDef.BottomMargin = app.api.MiliToHwpUnit(bottom)
    p.PageDef.FooterLen = app.api.MiliToHwpUnit(footer)
    p.PageDef.LeftMargin = app.api.MiliToHwpUnit(left)
    p.PageDef.GutterLen = app.api.MiliToHwpUnit(gutter)

    return action.run()


# %% ../nbs/02_api/00_core.ipynb 47
class SizeOption(Enum):
    RealSize = 0
    SpecificSize = 1
    CellSize = 2
    CellSizeWithSameRatio = 3

class Effect(Enum):
    RealPicture = 0
    GrayScale = 1
    BlackWhite = 2

@patch
def insert_picture(
    app: App,
    fpath,
    width=None,
    height=None,
    size_option=SizeOption.RealSize,
    reverse=False,
    watermark=False,
    effect=Effect.RealPicture,
):
    """
    Inserts a picture into the document with specified size and effect options.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    fpath : str
        File path of the picture to be inserted.
    width : int, optional
        Width of the picture, if None, determined by size option. Defaults to None.
    height : int, optional
        Height of the picture, if None, determined by size option. Defaults to None.
    size_option : SizeOption, optional
        The sizing option for the picture, defined in `SizeOption` Enum. Defaults to SizeOption.RealSize.
    reverse : bool, optional
        If true, the image is reversed. Defaults to False.
    watermark : bool, optional
        If true, the image is treated as a watermark. Defaults to False.
    effect : Effect, optional
        The visual effect for the picture, defined in `Effect` Enum. Defaults to Effect.RealPicture.

    Returns
    -------
    bool
        True if the picture was inserted successfully, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> success = insert_picture(app, 'path/to/image.jpg', width=100, height=200, size_option=SizeOption.SpecificSize, effect=Effect.GrayScale)
    >>> print(success)
    """

    path = Path(fpath)
    size_option = size_option.value
    effect = effect.value

    return app.api.InsertPicture(
        path.absolute().as_posix(),
        Width=width,
        Height=height,
        sizeoption=size_option,
        reverse=reverse,
        watermark=watermark,
        effect=effect,
    )


# %% ../nbs/02_api/00_core.ipynb 48
class SelectionOption(Enum):
    Doc = ("MoveDocBegin", "MoveSelDocEnd")
    Para = ("MoveParaBegin", "MoveSelParaEnd")
    Line = ("MoveLineBegin", "MoveSelLineEnd")
    Word = ("MoveWordBegin", "MoveSelWordEnd")

@patch
def select_text(app: App, option=SelectionOption.Line):
    """
    Selects text in the document based on the specified option.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    option : SelectionOption, optional
        The text unit to be selected. Options are defined in SelectionOption Enum. Default is SelectionOption.Line.

    Returns
    -------
    tuple
        A tuple containing the results of the begin and end move actions (both boolean).

    Examples
    --------
    >>> app = App()
    >>> select_text(app, option=SelectionOption.Para)
    """

    begin_action_name, end_action_name = option.value
    begin_action = getattr(app.actions, begin_action_name)
    end_action = getattr(app.actions, end_action_name)

    return begin_action().run(), end_action().run()


# %% ../nbs/02_api/00_core.ipynb 51
@patch
def get_selected_text(app: App):
    """
    Retrieves text from the currently selected area in the Hancom Office Hwp document.

    This function scans the selected text in the document and returns it as a string.
    It's particularly useful for operations involving the currently highlighted or selected text segment.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.

    Returns
    -------
    str
        The text from the currently selected area in the document.

    Examples
    --------
    >>> app = App()
    >>> selected_text = get_selected_text(app)
    >>> print(selected_text)
    """

    with app.scan(selection=True) as scan:
        text = "\n".join(scan)
    return text


# %% ../nbs/02_api/00_core.ipynb 56
class Direction(Enum):
    Forward = 0
    Backward = 1
    All = 2


# %% ../nbs/02_api/00_core.ipynb 57
@patch
def find_text(
    app: App,
    text="",
    charshape: CharShape = None,
    ignore_message=True,  # 메시지 무시 여부
    direction=Direction.Forward,  # 찾을 방향
    match_case=False,  # 대소문자 구분
    all_word_forms=False,  # 문자열 결합
    several_words=False,  # 여러 단어 찾기
    use_wild_cards=False,  # 아무개 문자
    whole_word_only=False,  # 온전한 낱말
    replace_mode=False,  # 찾아 바꾸기 모드
    ignore_find_string=False,  # 찾을 문자열 무시
    ignore_replace_string=False,  # 바꿀 문자열 무시
    find_style="",  # 찾을 스타일
    replace_style="",
    find_jaso=False,  # 자소로 찾기
    find_reg_exp=False,  # 정규표현식으로 찾기
    find_type=False,  # 다시 찾기를 할 때 마지막으로 실한 찾기를 할 경우 True, 찾아가기를 할경우 False
):
    """
    Searches for the specified text in the document with various options.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    text : str
        The text string to search for.
    [Other parameters...]

    Returns
    -------
    bool
        True if the text was found, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> found = find_text(app, text="Hello", direction=Direction.Forward)
    >>> print(found)
    """

    action = app.actions.RepeatFind()
    p = action.pset

    # Set options
    p.FindString = text
    p.IgnoreMessage = ignore_message
    p.MatchCase = match_case
    p.AllWordForms = all_word_forms
    p.Direction = direction.value  # Use the Enum value
    p.SeveralWords = several_words
    p.UseWildCards = use_wild_cards
    p.WholeWordOnly = whole_word_only
    p.ReplaceMode = replace_mode
    p.IgnoreFindString = ignore_find_string
    p.IgnoreReplaceString = ignore_replace_string
    p.FindStyle = find_style
    p.ReplaceStyle = replace_style
    p.FindJaso = find_jaso
    p.FindRegExp = find_reg_exp
    p.FindType = find_type

    # Set charshape
    if charshape:
        set_pset(p.FindCharShape, charshape.todict())

    return action.run()


# %% ../nbs/02_api/00_core.ipynb 59
@patch
def replace_all(
    app: App,
    old_text="",
    new_text="",
    old_charshape: CharShape = None,
    new_charshape: CharShape = None,
    ignore_message=True,  # 메시지 무시 여부
    direction=Direction.All,  # 찾을 방향
    match_case=False,  # 대소문자 구분
    all_word_forms=False,  # 문자열 결합
    several_words=False,  # 여러 단어 찾기
    use_wild_cards=False,  # 아무개 문자
    whole_word_only=False,  # 온전한 낱말
    auto_spell=True,  # 토시 자동 교정
    replace_mode=True,  # 찾아 바꾸기 모드
    ignore_find_string=False,  # 찾을 문자열 무시
    ignore_replace_string=False,  # 바꿀 문자열 무시
    find_style="",  # 찾을 스타일
    replace_style="",  # 바꿀 스타일
    find_jaso=False,  # 자소로 찾기
    find_reg_exp=False,  # 정규표현식으로 찾기
    find_type=True,  # 다시 찾기를 할 때 마지막으로 실한 찾기를 할 경우 True, 찾아가기를 할경우 False
):
    """
    Replaces all occurrences of a specified text with new text in the document.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    old_text : str
        The text string to be replaced.
    new_text : str
        The new text string to replace with.
    [Other parameters...]

    Returns
    -------
    bool
        True if the replace operation was successful, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> success = replace_all(app, old_text="Hello", new_text="Hi", direction=Direction.All)
    >>> print(success)
    """

    action = app.actions.AllReplace()
    p = action.pset

    # Set options
    p.FindString = old_text
    p.ReplaceString = new_text
    p.IgnoreMessage = ignore_message
    p.MatchCase = match_case
    p.AllWordForms = all_word_forms
    p.Direction = direction.value
    p.UseWildCards = use_wild_cards
    p.WholeWordOnly = whole_word_only
    p.AutoSpell = auto_spell
    p.ReplaceMode = replace_mode
    p.IgnoreFindString = ignore_find_string
    p.IgnoreReplaceString = ignore_replace_string
    p.FindStyle = find_style
    p.ReplaceStyle = replace_style
    p.FindJaso = find_jaso
    p.FindRegExp = find_reg_exp
    p.FindType = find_type

    # Set old and new charshape
    if old_charshape:
        set_pset(p.FindCharShape, old_charshape.todict())
    if new_charshape:
        set_pset(p.ReplaceCharShape, new_charshape.todict())

    return action.run()


# %% ../nbs/02_api/00_core.ipynb 63
@patch
def insert_file(
    app: App,
    fpath,
    keep_charshape=False,
    keep_parashape=False,
    keep_section=False,
    keep_style=False,
):
    """
    Inserts the contents of a specified file into the current document.

    This function inserts the contents of another file into the current document at the cursor's position. 
    It provides options to retain various formatting attributes of the inserted content.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    fpath : str
        The file path of the document to be inserted.
    keep_charshape : bool, optional
        If True, retains the original character shapes from the inserted file. Defaults to False.
    keep_parashape : bool, optional
        If True, retains the original paragraph shapes from the inserted file. Defaults to False.
    keep_section : bool, optional
        If True, retains the original section formatting from the inserted file. Defaults to False.
    keep_style : bool, optional
        If True, retains the original styles from the inserted file. Defaults to False.

    Returns
    -------
    bool
        True if the file was inserted successfully, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> success = insert_file(app, 'path/to/file.hwp', keep_style=True)
    >>> print(success)
    """

    action = app.actions.InsertFile()
    p = action.pset
    p.filename = Path(fpath).absolute().as_posix()
    p.KeepCharshape = keep_charshape
    p.KeepParashape = keep_parashape
    p.KeepSection = keep_section
    p.KeepStyle = keep_style

    return action.run()


# %% ../nbs/02_api/00_core.ipynb 64
class Thickness(Enum):
    NULL = None
    최소값 = -1  # "최소값 (=0.1 mm)"
    _0_1_mm = 0  # "0.1 mm"
    _0_12_mm = 1  # "0.12 mm"
    _0_15_mm = 2  # "0.15 mm"
    _0_2_mm = 3  # "0.2 mm"
    _0_25_mm = 4  # "0.25 mm"
    _0_3_mm = 5  # "0.3 mm"
    _0_4_mm = 6  # "0.4 mm"
    _0_5_mm = 7  # "0.5 mm"
    _0_6_mm = 8  # "0.6 mm"
    _0_7_mm = 9  # "0.7 mm"
    _1_0_mm = 10  # "1.0 mm"
    _1_5_mm = 11  # "1.5 mm"
    _2_0_mm = 12  # "2.0 mm"
    _3_0_mm = 13  # "3.0 mm"
    _4_0_mm = 14  # "4.0 mm"
    _5_0_mm = 15  # "5.0 mm"
    최대값 = 16  # "최대값 (=5.0 mm)"

    @classmethod
    def get_thickness_description(cls, value):
        """
        Returns the description of the thickness based on the value.

        Parameters
        ----------
        value : int
            The value representing the thickness.

        Returns
        -------
        str
            The string description associated with the thickness value.
        """
        for thickness in cls:
            if thickness.value == value:
                return thickness.name.replace('_', '.')
        return None



@patch
def set_cell_border(
    app: App,
    top=None,
    right=None,
    left=None,
    bottom=None,
    horizontal=None,
    vertical=None,
    top_width=Thickness.NULL,
    right_width=Thickness.NULL,
    left_width=Thickness.NULL,
    bottom_width=Thickness.NULL,
    horizontal_width=Thickness.NULL,
    vertical_width=Thickness.NULL,
    top_color=None,
    bottom_color=None,
    left_color=None,
    right_color=None,
    horizontal_color=None,
    vertical_color=None,
):
    """
    Sets the border properties for cells in a table within a Hancom Office Hwp document.

    This function customizes the border types, widths, and colors for different sides of the cells. 
    It allows for detailed customization of cell appearance in tables.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    top, right, left, bottom, horizontal, vertical : int, optional
        Types of borders for the respective sides and internal lines of the cell (e.g., solid, dashed).
    top_width, right_width, left_width, bottom_width, horizontal_width, vertical_width : Thickness, optional
        Widths of the borders corresponding to the sides and internal lines of the cell. Specified using the `Thickness` Enum.
    top_color, bottom_color, left_color, right_color, horizontal_color, vertical_color : str, optional
        Colors for the respective borders in a string format (e.g., "#RRGGBB").

    Returns
    -------
    bool
        True if the border settings were successfully applied, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> success = set_cell_border(app, top=1, bottom=1, top_width=Thickness._0_25_mm, bottom_width=Thickness._0_25_mm, top_color="#FF0000", bottom_color="#00FF00")
    >>> print(success)

    Notes
    -----
    The function relies on the `app.actions.CellFill` action to set the border properties. The `Thickness` Enum provides predefined thickness levels for the borders. The color parameters should be provided in hex format.
    """
    attrs = {
        "BorderTypeTop": top,
        "BorderTypeRight": right,
        "BorderTypeLeft": left,
        "BorderTypeBottom": bottom,
        "TypeHorz": horizontal,
        "TypeVert": vertical,
        "BorderWidthTop": top_width.value,
        "BorderWidthRight": right_width.value,
        "BorderWidthLeft": left_width.value,
        "BorderWidthBottom": bottom_width.value,
        "WidthHorz": horizontal_width.value,
        "WidthVert": vertical_width.value,
        "BorderColorTop": app.api.RGBColor(get_rgb_tuple(top_color))
        if top_color
        else None,
        "BorderColorRight": app.api.RGBColor(get_rgb_tuple(right_color))
        if right_color
        else None,
        "BorderColorLeft": app.api.RGBColor(get_rgb_tuple(left_color))
        if left_color
        else None,
        "BorderColorBottom": app.api.RGBColor(get_rgb_tuple(bottom_color))
        if bottom_color
        else None,
        "ColorHorz": app.api.RGBColor(get_rgb_tuple(horizontal_color))
        if horizontal_color
        else None,
        "ColorVert": app.api.RGBColor(get_rgb_tuple(vertical_color))
        if vertical_color
        else None,
    }

    action = app.actions.CellFill()
    p = action.pset

    for key, value in attrs.items():
        if value is None:
            continue
        setattr(p, key, value)

    return action.run()

# %% ../nbs/02_api/00_core.ipynb 65
@patch
def set_cell_color(
    app: App, bg_color=None, hatch_color="#000000", hatch_style=6, alpha=None
):
    """
    Sets the background color and hatch style for cells in a Hancom Office Hwp document.

    This function allows customization of the cell background, including color and hatching pattern,
    providing options to set transparency and hatch color.

    Parameters
    ----------
    app : App
        The `App` instance associated with the Hancom Office Hwp program.
    bg_color : str, optional
        Hexadecimal color code for the cell background (e.g., "#RRGGBB"). If not specified, the background is not changed.
    hatch_color : str, optional
        Hexadecimal color code for the hatching. Default is black ("#000000").
    hatch_style : int, optional
        Style of the hatching pattern. Default is 6.
    alpha : int, optional
        Alpha value for the background color's transparency (0-255). If not specified, transparency is not changed.

    Returns
    -------
    bool
        True if the cell color settings were applied successfully, False otherwise.

    Examples
    --------
    >>> app = App()
    >>> success = set_cell_color(app, bg_color="#FF0000", hatch_color="#0000FF", hatch_style=5, alpha=128)
    >>> print(success)

    Notes
    -----
    The function uses the `app.actions.CellBorderFill` action for setting the cell properties.
    Colors are specified in hexadecimal format. The alpha parameter controls the transparency of the background color.
    """

    fill_type = windows_brush = None
    if bg_color:
        fill_type = 1
        windows_brush = 1

    attrs = {
        "type": fill_type,
        "WindowsBrush": windows_brush,
        "WinBrushFaceColor": app.api.RGBColor(*get_rgb_tuple(bg_color)) if bg_color else None,
        "WinBrushAlpha": alpha,
        "WinBrushHatchColor": app.api.RGBColor(*get_rgb_tuple(hatch_color)) if hatch_color else None,
        "WinBrushFaceStyle": hatch_style,
    }

    action = app.actions.CellBorderFill()
    p = action.pset

    for key, value in attrs.items():
        if value is not None:
            setattr(p.FillAttr, key, value)

    return action.run()

