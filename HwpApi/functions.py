# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_functions.ipynb.

# %% auto 0
__all__ = ['get_absolute_path', 'get_dll_path', 'add_dll_to_registry', 'get_registry_value', 'check_dll', 'get_value']

# %% ../nbs/03_functions.ipynb 3
from pathlib import Path

def get_absolute_path(path):
    name = Path(path)
    return name.absolute().as_posix()

# %% ../nbs/03_functions.ipynb 4
import importlib.resources

def get_dll_path(package_name, dll_filename):
    try:
        with importlib.resources.path(package_name, dll_filename) as dll_path:
            return str(dll_path)
    except FileNotFoundError as e:
        raise FileNotFoundError(f"The DLL file '{dll_filename}' was not found in the package '{package_name}'.") from e


# %% ../nbs/03_functions.ipynb 5
import winreg
import os


def add_dll_to_registry(dll_path, key_path):
    try:
        # Connect to the registry and open the specified key
        registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)

        # Set the value for the new registry entry as a string (REG_SZ)
        winreg.SetValueEx(registry_key, "FilePathCheckerModule", 0, winreg.REG_SZ, dll_path)

        # Close the registry key
        winreg.CloseKey(registry_key)
        print("DLL path added to registry as a string value successfully.")
    except WindowsError as e:
        print("Error while adding DLL path to registry: ", e)
        
        
def get_registry_value(key_path, value_name):
    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path) as key:
            value, value_type = winreg.QueryValueEx(key, value_name)
            return value
    except FileNotFoundError:
        return None


# %% ../nbs/03_functions.ipynb 6
def check_dll():
    dll_path = get_dll_path("HwpApi", "FilePathCheckerModuleExample.dll")
    key_path = "SOFTWARE\\HNC\\HwpAutomation\\Modules"
    value_name = "FilePathCheckerModule" 

    value = get_registry_value(key_path, value_name)

    if value is None:
        add_dll_to_registry(dll_path, key_path)
    return True


# %% ../nbs/03_functions.ipynb 7
def get_value(dict_, key):
    try:
        return dict_[key]
    except KeyError:
        raise KeyError(f"{key}를 해당하는 키 중 찾을 수 없습니다. 키는 {', '.join(dict_.keys())} 중에 있어야 합니다.")
