# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_functions.ipynb.

# %% auto 0
__all__ = ['get_absolute_path', 'get_dll_path', 'add_dll_to_registry', 'get_registry_value', 'check_dll', 'get_value',
           'set_charshape']

# %% ../nbs/03_functions.ipynb 3
from pathlib import Path

def get_absolute_path(path):
    name = Path(path)
    return name.absolute().as_posix()

# %% ../nbs/03_functions.ipynb 4
import importlib.resources

def get_dll_path(package_name, dll_filename):
    try:
        with importlib.resources.path(package_name, dll_filename) as dll_path:
            return str(dll_path)
    except FileNotFoundError as e:
        raise FileNotFoundError(f"The DLL file '{dll_filename}' was not found in the package '{package_name}'.") from e


# %% ../nbs/03_functions.ipynb 5
import winreg
import os


def add_dll_to_registry(dll_path, key_path):
    try:
        # Connect to the registry and open the specified key
        registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)

        # Set the value for the new registry entry as a string (REG_SZ)
        winreg.SetValueEx(registry_key, "FilePathCheckerModule", 0, winreg.REG_SZ, dll_path)

        # Close the registry key
        winreg.CloseKey(registry_key)
        print("DLL path added to registry as a string value successfully.")
    except WindowsError as e:
        print("Error while adding DLL path to registry: ", e)
        
        
def get_registry_value(key_path, value_name):
    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path) as key:
            value, value_type = winreg.QueryValueEx(key, value_name)
            return value
    except FileNotFoundError:
        return None


# %% ../nbs/03_functions.ipynb 6
def check_dll():
    dll_path = get_dll_path("HwpApi", "FilePathCheckerModuleExample.dll")
    key_path = "SOFTWARE\\HNC\\HwpAutomation\\Modules"
    value_name = "FilePathCheckerModule" 

    value = get_registry_value(key_path, value_name)

    if value is None:
        add_dll_to_registry(dll_path, key_path)
    return True


# %% ../nbs/03_functions.ipynb 7
def get_value(dict_, key):
    try:
        return dict_[key]
    except KeyError:
        raise KeyError(f"{key}를 해당하는 키 중 찾을 수 없습니다. 키는 {', '.join(dict_.keys())} 중에 있어야 합니다.")

# %% ../nbs/03_functions.ipynb 8
def set_charshape(
    charshape, 
    face_name:str=None, 
    font_type:int=None, 
    size:int=None,
    ratio:int=None, 
    spacing:int=None, 
    offset:int=None,
    bold:bool=None, 
    italic:bool=None, 
    small_caps:bool=None,
    emboss:bool=None,
    super_script:bool=None,
    sub_script:bool=None,
    underline_type:int=None,
    outline_type:int=None,
    text_color=None,
    shade_color=None,
    underline_shape:int=None,
    underline_color=None,
    shadow_offset_x:int=None,
    shadow_offset_y:int=None,
    shadow_color=None,
    strike_out_type=None,
    diac_sym_mark=None,
    use_font_space=None,
    use_kerning=None,
    height:int=None,
    border_fill=None,
    
):
    params = []
    categories = ["Hangul", "Latin", "Hanja", "Japanese", "Other", "Symbol", "User"]
    
    params += [("FaceName"+cat, face_name) for cat in categories] if face_name else []
    params += [("FontType"+cat, font_type) for cat in categories] if face_name else []
    params += [("Size"+cat, size) for cat in categories] if size else []
    params += [("Ratio"+cat, ratio) for cat in categories] if ratio else []
    params += [("Spacing"+cat, spacing) for cat in categories] if spacing else []
    params += [("Offset"+cat, offset) for cat in categories] if offset else []
    
    params += list(
        filter(lambda x: x[1] is not None, 
            [
                ("Bold", bold),
                ("Italic", italic),
                ("SmallCaps", small_caps),
                ("Emboss", emboss),
                ("SuperScript", super_script),
                ("SubScript", sub_script),
                ("UnderlineType", underline_type),
                ("OutlineType", outline_type),
                ("TextColor", text_color),
                ("ShadeColor", shade_color),
                ("UnderlineShape", underline_shape),
                ("UnderlineColor", underline_color),
                ("ShadowOffsetX", shadow_offset_x),
                ("ShadowOffsetY", shadow_offset_y),
                ("ShadowColor", shadow_color),
                ("StrikeOutType", strike_out_type),
                ("DiacSymMark", diac_sym_mark),
                ("UseFontSpace", use_font_space),
                ("UseKerning", use_kerning),
                ("Height", height),
                ("BorderFill", border_fill)
            ]
        )
    ) 
    for key, value in params:
            setattr(charshape, key, value)
    
    return charshape

